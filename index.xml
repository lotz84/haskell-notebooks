<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>lotz&#39;s Haskell notebooks</title>
<link>https://lotz84.github.io/haskell-notebooks/</link>
<atom:link href="https://lotz84.github.io/haskell-notebooks/index.xml" rel="self" type="application/rss+xml"/>
<description>IHaskellで書いたnotebookを公開する場所</description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sat, 11 May 2024 15:00:00 GMT</lastBuildDate>
<item>
  <title>HaskellでQR分解を実装する</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-05-12/</link>
  <description><![CDATA[ 





<p><strong>QR分解</strong>は与えられた<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20n">行列<img src="https://latex.codecogs.com/png.latex?A">を<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20m">のユニタリ行列（実数の場合、直交行列）<img src="https://latex.codecogs.com/png.latex?Q">と<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20n">の上三角行列<img src="https://latex.codecogs.com/png.latex?R">の積、すなわち<img src="https://latex.codecogs.com/png.latex?A=QR">と分解する手法です。 数値的に安定な計算アルゴリズムが知られており、固有値の計算（<a href="https://en.wikipedia.org/wiki/QR_algorithm">QR法</a>）や<a href="https://twitter.com/lotz84_/status/1778800294207623190">カルマンフィルターの安定的な計算</a>にも応用されています。またこういった分解はより抽象的な対象で考えられることも多く、QR分解は<a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%BC%E7%BE%A4%E3%81%AE%E5%88%86%E8%A7%A3">半単純リー群の岩澤分解に一般化される</a>ことが知られています。</p>
<p>QR分解を実現するアルゴリズムは<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3">Wikipedia</a>にも詳しく載っており</p>
<ul>
<li>グラム・シュミットの正規直交化法</li>
<li>ハウスホルダー変換</li>
<li>ギブンス回転</li>
</ul>
<p>を利用した手法などがあります。</p>
<p>Haskellでも例えば <a href="https://hackage.haskell.org/package/hmatrix">hmatrix</a> が <a href="https://hackage.haskell.org/package/hmatrix-0.20.2/docs/Numeric-LinearAlgebra.html#v:qr"><code>qr</code></a> というQR分解を行う関数を提供していたり、hmatrixを使ったギブンス回転やハウスホルダー変換によるQR分解の実装を解説した記事もあります（<a href="http://www.nct9.ne.jp/m_hiroi/func/haskell48.html">お気楽 Haskell プログラミング入門 線形代数編</a>）。しかし本稿ではあえて vector-sized を使って自分で実装してみようと思い、数値的にも安定しているハウスホルダー変換を利用した<strong>実行列のQR分解</strong>の実装したいと思います。</p>
<section id="即席線形代数" class="level1">
<h1>即席線形代数</h1>
<p>まずは <a href="https://zenn.dev/lotz/articles/6b0d8081ad2f8a">Haskellで実装する即席線形代数</a> を参考に実装に必要なベクトルと行列の型と関数の定義を行います。</p>
<div id="8e633304-5173-40e0-9b2f-ccab2def1c5b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GHC.TypeLits</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Text.Printf</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span>)</span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> m (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ベクトルのスカラー倍</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(*^) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a</span>
<span id="cb1-11">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*^</span>) a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ベクトルをスカラー値で割る</span></span>
<span id="cb1-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(^/) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a</span>
<span id="cb1-15">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^/</span>) v a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recip</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*^</span> v</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 内積</span></span>
<span id="cb1-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">dot ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb1-19">dot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 外積</span></span>
<span id="cb1-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">outer ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> m a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a</span>
<span id="cb1-23">outer xs ys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) ys) xs</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ユークリッドノルム</span></span>
<span id="cb1-26"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">norm2V ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb1-27">norm2V <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | リストから行列を作成する</span></span>
<span id="cb1-30"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fromList ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [[a]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a)</span>
<span id="cb1-31">fromList <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&lt;</span>) V.fromList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> V.fromList</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列を整形して表示する</span></span>
<span id="cb1-34"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">displayM ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PrintfArg</span> a</span>
<span id="cb1-35">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 数値の表示幅</span></span>
<span id="cb1-36">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 有効数字</span></span>
<span id="cb1-37">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n m a</span>
<span id="cb1-38">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb1-39">displayM w p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.foldl (\x v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'\n'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> V.foldl (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> (V.map (printf <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%*.*f"</span> w p) v)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 単位行列</span></span>
<span id="cb1-42"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">identity ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n n a</span>
<span id="cb1-43">identity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.generate (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> V.generate (\y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列のスカラー倍</span></span>
<span id="cb1-46"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(*!!) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a</span>
<span id="cb1-47">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*!!</span>) a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a))</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列の転置</span></span>
<span id="cb1-50"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">transpose ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n m a</span>
<span id="cb1-51">transpose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequenceA</span></span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列積</span></span>
<span id="cb1-54"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(!*!) ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> r, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n r a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m r a</span>
<span id="cb1-55">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (transpose b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> dot) a</span></code></pre></div>
</div>
</section>
<section id="ハウスホルダー変換" class="level1">
<h1>ハウスホルダー変換</h1>
<p><a href="https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%A6%E3%82%B9%E3%83%9B%E3%83%AB%E3%83%80%E3%83%BC%E5%A4%89%E6%8F%9B">ハウスホルダー変換</a>は与えられたベクトル<img src="https://latex.codecogs.com/png.latex?x">を単位法線ベクトル<img src="https://latex.codecogs.com/png.latex?v">で表された原典を通る超平面で<strong>鏡映変換</strong>する変換です。変換後のベクトルは <img src="https://latex.codecogs.com/png.latex?x%20-%202%20v%20%5Clangle%20v,%20x%20%5Crangle"> と表すことができ、これは行列 <img src="https://latex.codecogs.com/png.latex?I%20-%202vv%5E%7B%5Crm%20T%7D">を<img src="https://latex.codecogs.com/png.latex?x">に左から掛けて変換していると考えることもできます。このハウスホルダー変換を使えば、与えられた行列の列ベクトルを左から順番に第n成分までの部分空間に射影していくことでQR分解を得ることができます。</p>
<p>アルゴリズムの詳しい解説は他の記事に譲るとして（例えば<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3#%E3%83%8F%E3%82%A6%E3%82%B9%E3%83%9B%E3%83%AB%E3%83%80%E3%83%BC%E5%A4%89%E6%8F%9B%E3%81%AE%E4%BD%BF%E7%94%A8">Wikipedia</a>）、さっそく実装を見ていきたいと思います。以下 <code>householder</code> として実装するのは添字<img src="https://latex.codecogs.com/png.latex?i">とベクトル<img src="https://latex.codecogs.com/png.latex?x">が与えられた時に、<img src="https://latex.codecogs.com/png.latex?x">の第<img src="https://latex.codecogs.com/png.latex?i">成分以降を第<img src="https://latex.codecogs.com/png.latex?i">成分までの部分空間に射影する（すなわち残りの成分を0にする）ハウスホルダー変換を表す行列を計算する関数です。</p>
<div id="fb9662a3-76d4-410d-93bf-061e0b2f44f4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Maybe</span> (fromJust)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Finite</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Finite</span>)</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V'</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ハウスホルダー変換</span></span>
<span id="cb2-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">householder ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Finite</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n n a</span>
<span id="cb2-8">householder i' x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i'</span>
<span id="cb2-10">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V'.drop i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.fromSized x</span>
<span id="cb2-11">      u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">V'.//</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, V'.head y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`V.withSized`</span> norm2V)]</span>
<span id="cb2-12">      padding <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">V'.++</span>) (V'.replicate i <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13">      u_norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`V.withSized`</span> norm2V</span>
<span id="cb2-14">      v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.toSized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V'.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>u_norm) u</span>
<span id="cb2-15">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span> u_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-12</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> identity <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*!!</span> outer v v</span></code></pre></div>
</div>
<p>ベクトルと行列の型にはサイズに関する情報を持たせていますが <code>householder</code> では最初からその情報を捨てて素の <code>Data.Vector</code> で変換を行っています。理由としてはハウスホルダー変換を計算するベクトルの長さ（すなわち<strong>型</strong>）は第一引数である <code>i'</code> の<strong>値</strong>に依存しており、今のHaskellの依存型だと今回の様な状況では簡潔に実装できる方法がないため型からサイズの情報を削ることにしました。</p>
<p>実装中に単位法線ベクトル<img src="https://latex.codecogs.com/png.latex?v">を計算するために法線ベクトル<img src="https://latex.codecogs.com/png.latex?u">をそのノルムで割る処理がありますが、<img src="https://latex.codecogs.com/png.latex?u">のノルムが非常に小さい場合この処理は不安定になります。しかし<img src="https://latex.codecogs.com/png.latex?u">のノルムが非常に小さいということは<img src="https://latex.codecogs.com/png.latex?x">と変換後のベクトルがほぼ等しいという状況を表しており、このような場合には結果となる変換行列をただの単位行列にするようにしています。</p>
</section>
<section id="qr分解" class="level1">
<h1>QR分解</h1>
<p>QR分解は与えられた行列の列ベクトルを左から順番にハウスホルダー変換して上三角行列を作ることにより得ることができます。</p>
<div id="5e0baf6e-6635-47ae-8b18-b08d4e1aafc3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE ScopedTypeVariables #-}</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Proxy</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Finite</span> (finite)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">qr ::</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">forall</span> m n a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m m a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a)</span>
<span id="cb3-8">qr a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb3-9">  transpose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldl</span> (\(q, r) i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<span id="cb3-11">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> householder (finite i) (V.index r (finite i))</span>
<span id="cb3-12">       <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> p)</span>
<span id="cb3-13">    ) (identity, transpose a) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromInteger</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span> (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)) (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>m))</span></code></pre></div>
</div>
<p>実装上の都合で行列は行ベクトルのベクトルとなっているので、列ベクトルを扱うために最初に転置を行い<img src="https://latex.codecogs.com/png.latex?A%5E%7B%5Crm%20T%7D">、得られた<img src="https://latex.codecogs.com/png.latex?R%5E%7B%5Crm%20T%7D">を最後にもう一度転置することにより計算しています。<img src="https://latex.codecogs.com/png.latex?Q">については本来転置したものが計算結果になるのであえて転置をしていません。</p>
</section>
<section id="数値実験" class="level1">
<h1>数値実験</h1>
<p>それでは実装した <code>qr</code> によって実際に行列のQR分解ができるか実験してみましょう。</p>
<p>まずは<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3#%E4%BE%8B_2">Wikipediaに載っている例</a>を元に実験してみます。</p>
<div id="29fce92e-f12b-4c34-bc87-0f3163d813c5" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb4-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb4-5">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-6">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>]</span>
<span id="cb4-7">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>]]</span>
<span id="cb4-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb4-9">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb4-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb4-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb4-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb4-17">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.857  -0.394  -0.331
   0.429   0.903   0.034
  -0.286   0.171  -0.943
R = 
  14.000  21.000 -14.000
   0.000 175.000 -70.000
   0.000   0.000  35.000
QR = 
  12.000 -51.000   4.000
   6.000 167.000 -68.000
  -4.000  24.000 -41.000
Q^TQ =
   1.000   0.000   0.000
   0.000   1.000   0.000
   0.000   0.000   1.000</code></pre>
</div>
</div>
<p><a href="https://www.wolframalpha.com/input?i=QR+decomposition+%7B%7B12%2C+-51%2C+4%7D%2C+%7B6%2C+167%2C+-68%7D%2C+%7B-4%2C+24%2C+-41%7D%7D">WolframAlphaでも同様の計算を行った結果</a>と比べてみても値が一致していることが分かります。</p>
<p>次に非正則行列の場合を見てみましょう。先程の例の行ベクトルと列ベクトルを一つずつ0に変えたような行列を使って実験してみます。</p>
<div id="b37410ca-839d-431e-9268-2074d1a49bd5" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb6-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb6-3">            [ [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-4">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-5">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb6-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb6-7">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb6-9">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb6-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb6-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb6-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
  -0.000  -0.000   1.000
   0.832   0.555   0.000
  -0.555   0.832   0.000
R = 
   7.211 125.640   0.000
  -0.000 112.604   0.000
  -0.000   0.000   0.000
QR = 
  -0.000  -0.000   0.000
   6.000 167.000   0.000
  -4.000  24.000   0.000
Q^TQ =
   1.000   0.000  -0.000
   0.000   1.000   0.000
  -0.000   0.000   1.000</code></pre>
</div>
</div>
<p>問題なさそうですね。</p>
<p>次に非正方行列の場合を見てみましょう。</p>
<div id="52287087-9679-47b8-81c5-265c7249e4db" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb8-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb8-5">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>]</span>
<span id="cb8-6">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>]</span>
<span id="cb8-7">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]]</span>
<span id="cb8-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb8-9">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb8-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb8-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb8-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb8-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb8-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb8-17">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.857  -0.394   0.331
   0.429   0.903  -0.034
  -0.286   0.171   0.943
R = 
  14.000  21.000
   0.000 175.000
  -0.000   0.000
QR = 
  12.000 -51.000
   6.000 167.000
  -4.000  24.000
Q^TQ =
   1.000   0.000  -0.000
   0.000   1.000  -0.000
  -0.000  -0.000   1.000</code></pre>
</div>
</div>
<div id="e172aa6b-1128-4154-a787-c244348a533b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb10-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb10-5">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb10-6">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>]]</span>
<span id="cb10-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb10-8">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb10-10">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb10-12">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb10-14">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb10-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb10-16">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.894  -0.447
   0.447   0.894
R = 
  13.416  29.069 -26.833
  -0.000 172.177 -62.610
QR = 
  12.000 -51.000   4.000
   6.000 167.000 -68.000
Q^TQ =
   1.000   0.000
   0.000   1.000</code></pre>
</div>
</div>
<p>行より列が多い場合でも列より行が多い場合でも問題なく計算できています。</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-05-12/</guid>
  <pubDate>Sat, 11 May 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskellで実装するk-means法とk-means++法</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/</link>
  <description><![CDATA[ 





<p><strong>k-means問題</strong>はクラスタリングに関する問題で、データの集合を<img src="https://latex.codecogs.com/png.latex?X">、クラスタ数を<img src="https://latex.codecogs.com/png.latex?k">とした時に、<img src="https://latex.codecogs.com/png.latex?X">の<a href="https://ja.wikipedia.org/wiki/%E9%9B%86%E5%90%88%E3%81%AE%E5%88%86%E5%89%B2">分割</a><img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7BS_1,%20S_2,%20%5Cdots,%20S_k%5C%7D"> の中で以下のコスト関数</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7BS%7D%7B%5Carg%5Cmin%7D%20%5Csum_%7Bi=1%7D%5Ek%5Csum_%7Bx%5Cin%20S_i%7D%5C%7Cx-%5Cmu_i%5C%7C%5E2%0A"></p>
<p>を最小にするものを見つけることが目的です。</p>
<p>ここで <img src="https://latex.codecogs.com/png.latex?%5Cmu_i"> はクラスタの中心で</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_i%20=%20%5Cfrac%7B1%7D%7B%7CS_i%7C%7D%5Csum_%7Bx%5Cin%20S_i%7Dx%0A"></p>
<p>と平均値で計算されることが多いです。</p>
<section id="k-means法" class="level1">
<h1>k-means法</h1>
<p>この問題は<strong>NP困難</strong>であることが知られていますが、<a href="https://ja.wikipedia.org/wiki/K%E5%B9%B3%E5%9D%87%E6%B3%95">k-means法</a>（<a href="https://en.wikipedia.org/wiki/Lloyd%27s_algorithm">Lloydアルゴリズム</a>）と呼ばれる<strong>局所解を高速に与える有名なアルゴリズム</strong>があります。それは以下のようなものです。</p>
<ol type="1">
<li>クラスタの中心としてデータ点からランダムにk個を選ぶ</li>
<li>各データ点を中心が最も近いクラスタに分類する</li>
<li>各クラスタに属するデータから改めて中心を計算する</li>
<li>収束するまで2,3を繰り返す</li>
</ol>
<p>アルゴリズムのイメージは実際に視覚的に見てみるのが分かりやすいでしょう。以下のサイトがk-means法を可視化してくれていてインタラクティブに試すことができるのでオススメです。</p>
<ul>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/11/07/k-means/">K-means 法を D3.js でビジュアライズしてみた</a></li>
</ul>
<p>Haskellにもk-means法を実装したライブラリはあります。</p>
<ul>
<li><a href="https://hackage.haskell.org/package/kmeans-0.1.3">kmeans</a></li>
<li><a href="https://hackage.haskell.org/package/kmeans-vector-0.3.2">kmeans-vector</a></li>
<li><a href="https://hackage.haskell.org/package/clustering">clustering</a></li>
</ul>
<p>ですが今回は自分で実装します。</p>
<div id="cbe07518-7510-44fa-899c-6439b39de18d" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE BlockArguments, DataKinds #-}</span> </span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GHC.TypeLits</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ボロノイ分割</span></span>
<span id="cb1-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">voronoiDecompose ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> b)</span>
<span id="cb1-10">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb1-11">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb1-12">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-13">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) [a]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ボロノイ分割</span></span>
<span id="cb1-14">voronoiDecompose distance ds cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-15">  V.accum (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>)) (V.replicate []) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span></span>
<span id="cb1-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (V.minIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.map (distance d) cs, d)) ds</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | k-means法</span></span>
<span id="cb1-20"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">kMeans ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Eq</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> b)</span>
<span id="cb1-21">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb1-22">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> ([a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 集約関数</span></span>
<span id="cb1-23">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb1-24">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-25">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-26">kMeans distance aggregate ds cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> cs' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> voronoiDecompose distance ds cs</span>
<span id="cb1-28">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cs' <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> cs' <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> kMeans distance aggregate ds cs'</span></code></pre></div>
</div>
<p><code>voronoiDecompose</code> は与えられた中心点に従ってデータ点を<a href="https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%AD%E3%83%8E%E3%82%A4%E5%9B%B3">ボロノイ領域</a>で分類する関数です。データ点はリストとして扱っていますが、中心点はランダムアクセスしたいので <a href="https://hackage.haskell.org/package/vector-sized-1.6.1/docs/Data-Vector-Sized.html#t:Vector"><code>Vector</code></a> を使って <img src="https://latex.codecogs.com/png.latex?O(1)"> アクセスできるようにしています。データ点の型は型変数で抽象化しており、必要になる距離関数は後から与えられるようになっています。</p>
<p><code>kMeans</code> はk-means法を計算する関数です。データ点をボロノイ分割した結果を集約して計算した新しい中心点がもとの中心点と一致するまで計算を繰り返します。</p>
</section>
<section id="k-means法-1" class="level1">
<h1>k-means++法</h1>
<p><code>kMeans</code> は中心点を更新していく関数として実装していますがそもそもの中心点はどのように用意すれば良いでしょうか。もちろんランダムなデータ点を取ってきても良いのですが、<a href="https://ja.wikipedia.org/wiki/K-means%2B%2B%E6%B3%95">k-means++法</a>と呼ばれる効率の良い中心点の与え方が知られています。k-means++法は以下のようなアルゴリズムです。</p>
<ol type="1">
<li>データ点からランダムに1つ目の中心点を選ぶ</li>
<li>それぞれのデータ点<img src="https://latex.codecogs.com/png.latex?x">に対して、最も近い中心点からの距離<img src="https://latex.codecogs.com/png.latex?D(x)">を計算する</li>
<li>データ点<img src="https://latex.codecogs.com/png.latex?x">につき重み<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BD%5E2(x)%7D%7B%5Csum_%7Bx%5Cin%20X%7DD%5E2(x)%7D">を考慮して新しい中心点をランダムに選ぶ</li>
<li>選ばれた中心点の数が予め与えられたクラスタ数<img src="https://latex.codecogs.com/png.latex?k">に到達するまで2,3を繰り返す</li>
</ol>
<p>感覚的には今ある中心点より遠くにあるデータ点が選ばれやすくなるように新しい中心点を選ぶような形になっています。それなら単純に<img src="https://latex.codecogs.com/png.latex?D(x)">に比例した重みでサンプリングしても良さそうなものですが、このアルゴリズムによって選ばれた中心点により評価したk-means問題のコスト関数の値を<img src="https://latex.codecogs.com/png.latex?%5Cphi">とすると、コスト関数の最小値<img src="https://latex.codecogs.com/png.latex?%5Cphi_%7B%5Crm%20OPT%7D">に対して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20E%7D%5B%5Cphi%5D%20%5Cleq%208(%5Clog%20k+2)%5Cphi_%7B%5Crm%20OPT%7D%0A"></p>
<p>を満たすことが<a href="https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf">証明できます</a>。この証明には<strong>コーシー・シュワルツの不等式</strong>が使われていて二乗の形であることが本質的な役割を果たしているのです（もう少し荒い評価にはなりますが単純に<img src="https://latex.codecogs.com/png.latex?l%5Ep">距離を用いた場合の不等式も論文には載っています）。このようにk-means++法は初期の中心点を決めた時点で期待値における理論的な精度評価が得られていますが、更にその後k-means法を用いてコスト関数を単調減少させることにより良いクラスタリングの結果が得られるようになっているのです。</p>
<p>それではk-means++法を実装してみましょう。</p>
<div id="50ddaa4b-23cb-4dc6-8201-0523c1bda092" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Proxy</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span>(..))</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Generic</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VG</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Generic.Sized.Internal</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VGSI</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random</span> (randomElement, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span>)</span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random.Distribution.Categorical</span> (weightedCategorical)</span>
<span id="cb2-7"></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ref. https://github.com/expipiplus1/vector-sized/issues/123</span></span>
<span id="cb2-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unfoldrM ::</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">forall</span> m n a b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Monad</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n)</span>
<span id="cb2-11">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> m (a, b)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> m (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> n a)</span>
<span id="cb2-12">unfoldrM f z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VGSI.Vector</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> VG.unfoldrExactNM i f z</span>
<span id="cb2-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> n))</span>
<span id="cb2-14"></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | k-means++法</span></span>
<span id="cb2-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">kMeansPlusPlus ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n</span>
<span id="cb2-18">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb2-19">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb2-20">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> n a) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb2-21">kMeansPlusPlus distance ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unfoldrM f []</span>
<span id="cb2-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb2-23">  f [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb2-24">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomElement ds</span>
<span id="cb2-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (c, [c])</span>
<span id="cb2-26">  f cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb2-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> distance c d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) cs) ds</span>
<span id="cb2-28">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> weightedCategorical (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ws ds)</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (c, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cs)</span></code></pre></div>
</div>
<p>k-means++法を実装するために<code>unfoldrM</code>という便利関数を定義しています。実は<code>vector</code>ライブラリにはこのような関数が<a href="https://hackage.haskell.org/package/vector-0.13.1.0/docs/Data-Vector-Unboxed.html#g:10">定義されている</a>のですが<code>vector-sized</code>には無いので自前で実装しています（実装して欲しいという<a href="https://github.com/expipiplus1/vector-sized/issues/123">issue</a>はあります）。</p>
<p><code>unfoldrM</code>を使えばk-means++法は素直に場合分けして実装するだけです。k-means++法はランダムな選択を伴うので何らかのモナドに包む必要があります。<code>IO</code>にしてしまっても良いのですが<a href="https://qiita.com/lotz/items/7c7df718d1a596cac920">確率分布もまたそれ自体がモナドになる</a>ので、できるだけ抽象的な型に留める形で実装しています。確率分布（確率変数）の型として、ここでは <a href="https://hackage.haskell.org/package/random-fu"><code>random-fu</code></a>の<code>RVar</code>を使っています。</p>
</section>
<section id="実験" class="level1">
<h1>実験</h1>
<p>それでは実装したk-means法、k-means++法を使って実際にクラスタリングを行ってみましょう。まずはクラスタリングの対象となる平面上の点を実装していきます。</p>
<div id="295b594b-15dc-4202-8160-79596d592867" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.List</span> (foldl')</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Maybe</span> (fromJust)</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 平面上の点</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x, y 座標から点を構築する</span></span>
<span id="cb3-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">mkPoint ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span></span>
<span id="cb3-11">mkPoint a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.fromList [a, b]</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 距離関数</span></span>
<span id="cb3-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">distance ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb3-16">distance v1 v2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>) v1 v2</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 平均値関数</span></span>
<span id="cb3-20"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">average ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span></span>
<span id="cb3-21">average ps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb3-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> ps</span>
<span id="cb3-23">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> foldl' (V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>)) (V.replicate <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) ps</span></code></pre></div>
</div>
<p>最後にこれらの点をランダムにサンプリングしてクラスタリングしてみましょう。クラスタの数は型に現れるので型注釈で与えます。</p>
<div id="b737df9e-d1c8-488a-b98f-c6b008da101d" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span> (replicateM)</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Traversable</span> (forM)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random</span> (normal, sampleFrom)</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random.Stateful</span> (newIOGenM, mkStdGen)</span>
<span id="cb4-7"></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">samples ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>]</span>
<span id="cb4-10">samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> forM clusters \(m, s) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<span id="cb4-11">  replicateM nEachSamples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> mkPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> normal m s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;*&gt;</span> normal m s</span>
<span id="cb4-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb4-13">  nEachSamples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb4-14">  clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb4-15"></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb4-18">  gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newIOGenM (mkStdGen <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-19">  ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sampleFrom gen samples</span>
<span id="cb4-20">  cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sampleFrom gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span></span>
<span id="cb4-21">    kMeansPlusPlus distance<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ds ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- k-means++法</span></span>
<span id="cb4-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> cs' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kMeans distance average ds cs  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- k-means法</span></span>
<span id="cb4-23">      voronoi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> voronoiDecompose distance ds cs'</span>
<span id="cb4-24">      toTuple v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (V.index v <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, V.index v <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb4-26">    plot (points <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> toTuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.index voronoi <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-27">    plot (points <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 2"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> toTuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.index voronoi <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/</guid>
  <pubDate>Fri, 22 Mar 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>高次元空間ではL1距離を使うのが良さそう</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/</link>
  <description><![CDATA[ 





<p><a href="https://www.semanticscholar.org/paper/On-the-Surprising-Behavior-of-Distance-Metrics-in-Aggarwal-Hinneburg/88fc7fc6ed73db6251967cfe40507a92008e5949">“On the Surprising Behavior of Distance Metrics in High Dimensional Spaces”</a>という論文を読んで面白かったのでまとめておきます。</p>
<p><img src="https://latex.codecogs.com/png.latex?d">次元空間の立方体<img src="https://latex.codecogs.com/png.latex?(0,1)%5Ed">中に分布する確率変数<img src="https://latex.codecogs.com/png.latex?X_d">を考えます。例えばモノクロ画像なんかは正規化すれば今考えてる確率変数になるでしょう。今<img src="https://latex.codecogs.com/png.latex?(0,%201)">上の任意の分布<img src="https://latex.codecogs.com/png.latex?F">を考え<img src="https://latex.codecogs.com/png.latex?F%5Ed">を確率分布とする<img src="https://latex.codecogs.com/png.latex?X_d">から<img src="https://latex.codecogs.com/png.latex?n">個のサンプルが得られたとします。サンプルにおける<img src="https://latex.codecogs.com/png.latex?L_k">ノルムの最大値を<img src="https://latex.codecogs.com/png.latex?Dmax%5Ek_d">、最小値を<img src="https://latex.codecogs.com/png.latex?Dmin%5Ek_d">とすると、<img src="https://latex.codecogs.com/png.latex?F">と<img src="https://latex.codecogs.com/png.latex?k">のみに依存する定数<img src="https://latex.codecogs.com/png.latex?C_k">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC_k%20%5Cleq%20%5Cunderset%7Bd%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%7B%5Crm%20E%7D%5Cleft%5B%5Cfrac%7BDmax%5Ek_d%20-%20Dmin%5Ek_d%7D%7Bd%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D%7D%5Cright%5D%20%5Cleq%20(n-1)C_k%0A"></p>
<p>が成り立ちます。ここで<img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20E%7D%5BX%5D">は<img src="https://latex.codecogs.com/png.latex?X">の期待値を表します。</p>
<p>つまりデータの存在する次元が上がるにつれて原点に近いものと遠いものの差が変化するスピードは<img src="https://latex.codecogs.com/png.latex?d%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D">ぐらいになるということです。証明を読めば分かりますが、差の漸近的な振る舞いを決める<img src="https://latex.codecogs.com/png.latex?d%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D">の<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D">は中心極限定理から出てきます。もし<img src="https://latex.codecogs.com/png.latex?k%20%5Cgeq%203">であればこれは減衰するので、どんどん近いデータと遠いデータの間に差がなくなってくるということを意味しています。これは原点を任意の注目する点に置き換えて考えれば、例えばサンプルの近傍を考えるときに次元が高くなると遠いものと近いものの区別がどんどんつかなくなっていくことを表しています。一方もし<img src="https://latex.codecogs.com/png.latex?k=2">であればこの差は一定に落ち着き、<img src="https://latex.codecogs.com/png.latex?k=1">であれば（期待通り？）大きくなってくれます。</p>
<p>次元が高くなれば立方体の対角線の長さも大きくなるので直感的には最大値と最小値の差はどんどん大きくなっていきそうですが、同時に、すべての次元で0付近の値が出る確率や1付近の値が出る確率は次元が高くなるとどんどん小さくなるので、差の期待値がどう振る舞うかはこれらの綱引きになりそうなことは直感的には分かります。この綱引きの勝敗が距離の測り方で決まるのは面白いですね。</p>
<p>この挙動を実際に確かめてみましょう。</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span> (replicateM)</span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random.MWC</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 確率変数</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GenIO</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | n個のリストの確率変数</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">randomNs ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> [a]</span>
<span id="cb1-11">randomNs n x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sample n</span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb1-13">    sample <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> _ <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> []</span>
<span id="cb1-14">    sample n g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-15">      a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x g</span>
<span id="cb1-16">      as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) g</span>
<span id="cb1-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>as)</span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- L_kノルム</span></span>
<span id="cb1-21"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">lk ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb1-22">lk k xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>k) xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> k)</span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | Dmax^k_d - Dmin^k_d</span></span>
<span id="cb1-26"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">diameter ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 直径計算のためのサンプルを生成する数</span></span>
<span id="cb1-27">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- L_kノルムのk</span></span>
<span id="cb1-28">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 次元d</span></span>
<span id="cb1-29">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb1-30">diameter n k d g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> xs g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> replicateM d (uniformR (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) g)</span>
<span id="cb1-32">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-33">     xss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomNs n xs g</span>
<span id="cb1-34">     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (lk k) xss</span>
<span id="cb1-35">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maximum</span> ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimum</span> ds</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 確率変数の期待値</span></span>
<span id="cb1-39"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">expected ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb1-40">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値を計算するのに用いるサンプル数</span></span>
<span id="cb1-41">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値を求める確率変数</span></span>
<span id="cb1-42">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値の確率変数</span></span>
<span id="cb1-43">expected n x g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-44">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomNs n x g</span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> as <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Traversable</span> (forM)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">ds ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>]</span>
<span id="cb2-5">ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb2-6"></span>
<span id="cb2-7">withSystemRandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb2-8">  diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> d) gen</span>
<span id="cb2-9">  diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> d) gen</span>
<span id="cb2-10">  diff3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> d) gen</span>
<span id="cb2-11">  diff4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> d) gen</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb2-13">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 1"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff1])</span>
<span id="cb2-14">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 2"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff2])</span>
<span id="cb2-15">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 3"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff3])</span>
<span id="cb2-16">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 4"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff4])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/index_files/figure-html/cell-3-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>次元を増やすにつれて<img src="https://latex.codecogs.com/png.latex?k=1">の時は最小値と最大値の差が大きくなっていきますが、<img src="https://latex.codecogs.com/png.latex?k=2">の場合は一定に落ち着き、<img src="https://latex.codecogs.com/png.latex?k=3,4">の場合は差がどんどんなくなっていき、この傾向は<img src="https://latex.codecogs.com/png.latex?k">が大きければより強いことが分かります。</p>
<p>論文ではもう一つ面白い式が導かれています。先程の不等式は最大値と最小値の差についてでしたが、今度は比についてです。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bd%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20%7B%5Crm%20E%7D%5Cleft%5B%5Csqrt%7Bd%7D%5Cleft(%5Cfrac%7BDmax%5Ek_d%7D%7BDmin%5Ek_d%7D%20-%201%5Cright)%5Cright%5D%20=%20C%5Csqrt%7B%5Cfrac%7B1%7D%7B2k+1%7D%7D%0A"></p>
<p>ただしこの式は<img src="https://latex.codecogs.com/png.latex?F">が一様分布でサンプルが2点である時という制約がついています。この式が示唆するのは最大値と最小値の比は<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Csqrt%7Bd%7D%7D">ぐらいのスピードで1に近づいていくということで、この挙動は<img src="https://latex.codecogs.com/png.latex?k">が1,2のときでも変わりません。</p>



 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/</guid>
  <pubDate>Fri, 10 Jul 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>2点テイラー展開の定義と数値実験</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/</link>
  <description><![CDATA[ 





<p>テイラー展開は滑らかな関数の一点における値や微分の値を使ったべき級数によって元の関数を表す方法でした。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20f(a)%20+%20f'(a)(x%20-%20a)%20+%20%5Cfrac%7Bf''(a)%7D%7B2!%7D%5Cleft(x-a%5Cright)%5E2%20+%20%5Cfrac%7Bf'''(a)%7D%7B3!%7D%5Cleft(x-a%5Cright)%5E3%20+%20%5Ccdots%0A"></p>
<p>これを2点以上に拡張したテイラー展開が存在していて、特に2点でテイラー展開を行うものは2点テイラー展開と呼ばれているそうです。</p>
<p>なんで2点でテイラー展開したくなるのかというと、普通のテイラー展開だと1点における2n階までの微分値を使わないと達成できない近似精度を2点テイラー展開だと2点におけるn階までの微分値で達成できたりするそうなのですが（スゴイ！）[^1]、個人的には2点でテイラー展開することで区分的に定義された関数も近似できるのが面白いなと思いました。</p>
<p>テイラー展開は1点の周りにおける情報しか使わないので通常近似できる範囲はその1点の近くまでです。特に関数が折れ線だったり、<a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">ReLU</a>のように各領域によって違う関数の組み合わせで表されている場合には領域を区分する点をまたいで近似できる範囲を拡張することができません。そこで2点テイラー展開を使えば区分する点をまたいだ2点の周りで展開することによりそれぞれの点の周りの情報を使ってテイラー展開よりも近似できる範囲を拡張することができるのです。以下の定理はこのことをより正確に表しています[^2]。</p>
<hr>
<p>Theorem. <img src="https://latex.codecogs.com/png.latex?f">を<img src="https://latex.codecogs.com/png.latex?%7B%5Cmathbb%20R%7D">上の以下のように表される関数とする。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cbegin%7Bcases%7D%20p(x)%5C%20%5C%20x%20%5Cin%20%5B0,%20%5Cinfty)%20%5C%5C%20q(x)%5C%20%5C%20x%20%5Cin%20(-%5Cinfty,%200)%20%5Cend%7Bcases%7D%0A"></p>
<p>ここで<img src="https://latex.codecogs.com/png.latex?p,%20q">は高々<img src="https://latex.codecogs.com/png.latex?m">次の多項式とする。この時、もし<img src="https://latex.codecogs.com/png.latex?p(0)=q(0)">であるならば<img src="https://latex.codecogs.com/png.latex?f(x)">は-1, 1において2点テイラー展開可能であり、<img src="https://latex.codecogs.com/png.latex?p_%7Bf,%5C%7B-1,%201%5C%7D(n,%20n)%7D(x)">をエルミート補間多項式だとすると以下が成り立つ。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bn%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7Dp_%7Bf,%5C%7B-1,%201%5C%7D(n,%20n)%7D(x)=f(x),%20%5Cforall%20x%20%5Cin%20%5Cleft(-%5Csqrt%202,%20%5Csqrt%202%5Cright)%0A"></p>
<hr>
<p>ところでまだ2点テイラー展開の定義をしていませんでした。2点テイラー展開は多項式補間の考え方を経由して定義されます。<br>
（以下の説明は[^2]の導入部分を大いに参考にしています）</p>
<p>十分になめらかな実数値関数<img src="https://latex.codecogs.com/png.latex?f(x)">に対して<img src="https://latex.codecogs.com/png.latex?n">個の点<img src="https://latex.codecogs.com/png.latex?X%20=%20%5C%7Bx_0,%5Cdots,x_n%5C%7D">とそれぞれの点に対応する自然数<img src="https://latex.codecogs.com/png.latex?k_i(0%5Cleq%20i%5Cleq%20n)">が与えられた時、高々<img src="https://latex.codecogs.com/png.latex?m(=k_0+%5Ccdots+k_n-1)">次の多項式<img src="https://latex.codecogs.com/png.latex?p_%7Bf,X(k_0,%5Cdots,k_n)%7D(x)">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%5E%7B(j)%7D_%7Bf,X(k_0,%5Cdots,k_n)%7D(x_i)%20=%20f%5E%7B(j)%7D(x_i),%200%5Cleq%20j%20%5Cleq%20k_i-1,%200%20%5Cleq%20i%20%5Cleq%20n%0A"></p>
<p>を満たす時、<img src="https://latex.codecogs.com/png.latex?p_%7Bf,X(k_0,%5Cdots,k_n)%7D(x)">を<img src="https://latex.codecogs.com/png.latex?f(x)">のエルミート補間多項式と呼びます。</p>
<p>もし<img src="https://latex.codecogs.com/png.latex?f(x)">が一点<img src="https://latex.codecogs.com/png.latex?x_0">の周りで無限回微分可能であり、ある正の実数<img src="https://latex.codecogs.com/png.latex?%5Crho">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bn%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20p_%7Bf,X(n)%7D(x)%20=%20f(x),%20%5Cforall%20x%20%5Cin%20(x_0-%5Crho,%20x_0+%5Crho)%0A"></p>
<p>となるならば<img src="https://latex.codecogs.com/png.latex?f(x)">は同じ範囲でテイラー展開可能であることが分かります。</p>
<p>この事実を発展させて<img src="https://latex.codecogs.com/png.latex?n">点テイラー展開は以下のように定義されます。</p>
<hr>
<p><img src="https://latex.codecogs.com/png.latex?f">をある区間<img src="https://latex.codecogs.com/png.latex?I">で定義された実数値関数とし、<img src="https://latex.codecogs.com/png.latex?I">に含まれる<img src="https://latex.codecogs.com/png.latex?n">個の点<img src="https://latex.codecogs.com/png.latex?X=%5C%7Bx_0,%5Cdots%20x_%7Bn-1%7D%5C%7D">で<img src="https://latex.codecogs.com/png.latex?f">が無限回微分可能であったとする。もし</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bm%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20p_%7Bf,X(m,%5Cdots,m)%7D(x)%20=%20f(x),%20%5Cforall%20x%20%5Cin%20I%0A"></p>
<p>が成り立つならば<img src="https://latex.codecogs.com/png.latex?f">は<img src="https://latex.codecogs.com/png.latex?I">において<img src="https://latex.codecogs.com/png.latex?n">点テイラー展開可能であるという。</p>
<hr>
<p><img src="https://latex.codecogs.com/png.latex?n">点テイラー展開の具体的な形は、エルミート補間多項式の一般公式が知られているので[^3]そちらから計算可能でしょう。特に2点テイラー展開の場合の級数の計算式は以下のようにできるとTwitterで教えてもらいました[^4]。（そもそも2点テイラー展開を知ったきっかけも、このnotebookを書こうと思ったのも島田さんのTweetに触発されてでした。感謝🙏）</p>
<section id="数値実験" class="level2">
<h2 class="anchored" data-anchor-id="数値実験">数値実験</h2>
<p>比較のためにまずは通常のテイラー展開を実装してみます</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Number.Symbolic</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.AD</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.AD.Mode.Tower</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 階乗</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fact ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb1-11">fact n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">product</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n]</span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開</span></span>
<span id="cb1-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">taylorSeries ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb1-16">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- この次数以下の級数まで展開する</span></span>
<span id="cb1-17">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">forall</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開する関数</span></span>
<span id="cb1-18">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点</span></span>
<span id="cb1-19">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開後の級数</span></span>
<span id="cb1-20">taylorSeries n f a x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefficients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polynomials</span>
<span id="cb1-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb1-22">  coefficients <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs f a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- f(a)/0!, f'(a)/1!, f''(a)/2!, f'''(a)/3!, ...</span></span>
<span id="cb1-23">  factorials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fact) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 0!, 1!, 2!, 3!, ...</span></span>
<span id="cb1-24">  polynomials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-a, (x-a)^2, (x-a)^3, ...</span></span>
<span id="cb1-25">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>)</span>
<span id="cb1-26">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29">taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (var <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0+x+0.5*x*x+0.16666666666666666*x*x*x</code></pre>
</div>
</div>
<p>4次までの指数関数のテイラー展開をちゃんと計算できていますね</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%20+%20x%20+%20%5Cfrac%7Bx%5E2%7D%7B2!%7D%20+%20%5Cfrac%7Bx%5E3%7D%7B3!%7D%0A"></p>
<p>次は2点テイラー展開を実装してみましょう</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 2点テイラー展開</span></span>
<span id="cb3-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">twoPointTaylorSeries ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb3-3">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- この次数以下の級数まで展開する</span></span>
<span id="cb3-4">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">forall</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開する関数</span></span>
<span id="cb3-5">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点1</span></span>
<span id="cb3-6">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点2</span></span>
<span id="cb3-7">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開後の級数</span></span>
<span id="cb3-8">twoPointTaylorSeries n f a b x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> seriesA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seriesB</span>
<span id="cb3-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb3-10">  seriesA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polyB)</span>
<span id="cb3-11">  seriesB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polyA)</span>
<span id="cb3-12">  fa x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> auto b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- A(x)</span></span>
<span id="cb3-13">  fb x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> auto a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- B(x)</span></span>
<span id="cb3-14">  coefA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs fa a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- A(a)/0!, A'(a)/1!, A''(a)/2!, A'''(a)/3!, ...</span></span>
<span id="cb3-15">  coefB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs fb b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- B(b)/0!, B'(b)/1!, B''(b)/2!, B'''(b)/3!, ...</span></span>
<span id="cb3-16">  polyA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-a, (x-a)^2, (x-a)^3, ...</span></span>
<span id="cb3-17">  polyB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-b, (x-b)^2, (x-b)^3, ...</span></span>
<span id="cb3-18">  factorials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fact) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 0!, 1!, 2!, 3!, ...</span></span>
<span id="cb3-19">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>)</span>
<span id="cb3-20">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"></span>
<span id="cb3-23">twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (var <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- id ≡ f(x) = x</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.25*(1.0+x)*(1.0+x)+(-0.25)*(-1.0+x)*(-1.0+x)</code></pre>
</div>
</div>
<p>式が複雑になるので<img src="https://latex.codecogs.com/png.latex?f(x)=x">という単純な関数を展開して確かめてみました。式を整理するとちゃんと正しい答えになってるのが分かります。</p>
<p>それでは実際に関数を近似してみましょう</p>
<p>まずは</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7B1+x%5E2%7D%0A"></p>
<p>という関数を展開してみましょう</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">cauchy ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb5-4">cauchy x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">domain ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb5-7">domain <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span>
<span id="cb5-8"></span>
<span id="cb5-9">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb5-10">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cauchy"</span>    [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, cauchy x)])</span>
<span id="cb5-11">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> cauchy <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> x)])</span>
<span id="cb5-12">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> cauchy (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>青線が元の関数、緑線が<img src="https://latex.codecogs.com/png.latex?0">周りでの5次までのテイラー展開、赤線が<img src="https://latex.codecogs.com/png.latex?-1,%201">周りでの5次までの2点テイラー展開です。同じ次数までの展開ですが2点テイラー展開のほうがより高い精度で近似できているのが分かります</p>
<p>次に区分的に定義された関数であるReLUを展開してみましょう</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">relu ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb6-2">relu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb6-5">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ReLU"</span>      [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, relu x)])</span>
<span id="cb6-6">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> relu <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span>
<span id="cb6-7">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> relu (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>テイラー展開は<img src="https://latex.codecogs.com/png.latex?1">の周りで展開していますがやはり0以下で関数が変わっていることには対応できていません。一方で2点テイラー展開は<img src="https://latex.codecogs.com/png.latex?1">の周りに加えて<img src="https://latex.codecogs.com/png.latex?-1">の周りの情報もつかえているのでReLUの形をより正確に近似できているのが分かります。</p>
</section>
<section id="参考文献" class="level2">
<h2 class="anchored" data-anchor-id="参考文献">参考文献</h2>
<ul>
<li>[1] Estes, R. H., and E. R. Lancaster. “Two-point Taylor series expansions.” (1966).</li>
<li>[2] Kitahara, Kazuaki, Taizo Chiyonobu, and Hirokazu Tsukamoto. “A note on two point Taylor expansion.” International Journal of Pure and Applied Mathematics 75.3 (2012): 327-338.</li>
<li>[3] 鈴木 実, “エルミート補間の一般公式（Generalized Hermite interpolation）” <a href="http://totoha.web.fc2.com/Hermite_interpolation.pdf" class="uri">http://totoha.web.fc2.com/Hermite_interpolation.pdf</a></li>
<li>[4] <a href="https://twitter.com/KS_Mathematics/status/1279807348391854080" class="uri">https://twitter.com/KS_Mathematics/status/1279807348391854080</a></li>
</ul>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/</guid>
  <pubDate>Wed, 08 Jul 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskellの非同期処理を使った入出力の重ね合わせ</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-06-29/</link>
  <description><![CDATA[ 





<p>これは<a href="https://jclub-heyhey.connpass.com/event/180807/">『Haskellによる並列・並行プログラミング』リモート輪講 #10</a>の発表資料です。</p>
<p>Haskellの非同期処理を使って並行に入出力を伴う処理を行うプログラムを書く方法について見ていきます。まず、複数のWebページを並行にダウンロードするようなタスクを考えます</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls1.hs</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Concurrent</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.ByteString.Char8</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">B</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">getURL ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ByteString</span></span>
<span id="cb1-8">getURL url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-9">  delay <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomRIO (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- URLのコンテンツを取得する時間ということにする</span></span>
<span id="cb1-10">  threadDelay delay</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (B.pack url)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example1 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb1-14">example1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-15">  m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb1-16">  m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb1-17">  </span>
<span id="cb1-18">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-19">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Shovel"</span></span>
<span id="cb1-20">    putMVar m1 r</span>
<span id="cb1-21"></span>
<span id="cb1-22">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-23">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Spade"</span></span>
<span id="cb1-24">    putMVar m2 r</span>
<span id="cb1-25"></span>
<span id="cb1-26">  r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m1</span>
<span id="cb1-27">  r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m2</span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> (B.length r1, B.length r2)</span>
<span id="cb1-29"></span></code></pre></div>
</div>
<ul>
<li><code>newEmptyMVar</code>で結果を受け取る箱を作る</li>
<li>非同期に取得処理を行い、結果を<code>MVar</code>に詰める</li>
<li><code>MVar</code>に結果が入るのを待つ</li>
</ul>
<p>という共通する実装のパターンが見え隠れしているので共通化してみましょう</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls2.hs</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MVar</span> a)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">async ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a)</span>
<span id="cb2-6">async action <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb2-7">  var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb2-8">  forkIO (action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar var)</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">wait ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb2-12">wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> readMVar var</span></code></pre></div>
</div>
<p>意図しないデッドロックを防ぐために <code>wait</code> では <code>takeMVar</code> ではなく <code>readMVar</code> を使っています</p>
<p>これを使えば <code>example1</code> を以下のように書き換えることができます</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls2.hs</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb3-4">example2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb3-5">  a1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> async (getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Shovel"</span>)</span>
<span id="cb3-6">  a2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> async (getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Spade"</span>)</span>
<span id="cb3-7">  r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wait a1</span>
<span id="cb3-8">  r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wait a2</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> (B.length r1, B.length r2)</span>
<span id="cb3-10"></span>
<span id="cb3-11">example2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(36,35)</code></pre>
</div>
</div>
<p>モナディックなコンビネータを使って更に簡潔に書くことも可能です</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls3.hs</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">sites <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb5-4">  [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.google.com"</span></span>
<span id="cb5-5">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.bing.com"</span></span>
<span id="cb5-6">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.yahoo.com"</span></span>
<span id="cb5-7">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.wikipedia.com/wiki/Spade"</span></span>
<span id="cb5-8">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.wikipedia.com/wiki/Shovel"</span></span>
<span id="cb5-9">  ]</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example3 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb5-12">example3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb5-13">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL) sites</span>
<span id="cb5-14">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb5-16"></span>
<span id="cb5-17">example3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[21,19,20,35,36]</code></pre>
</div>
</div>
<section id="asyncでのエラー処理" class="level2">
<h2 class="anchored" data-anchor-id="asyncでのエラー処理">Asyncでのエラー処理</h2>
<p><code>getURL</code> の中でエラーが起こった場合の挙動を見てみましょう</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Exception</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">getURL' ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ByteString</span></span>
<span id="cb7-4">getURL' url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb7-5">  throwIO (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ErrorCall</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oops!"</span>)</span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (B.pack url)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example4 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb7-9">example4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb7-10">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL') sites</span>
<span id="cb7-11">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb7-13"></span>
<span id="cb7-14">example4</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>: </code></pre>
</div>
</div>
<p><code>getURL'</code> では <code>async</code> の中で <code>putMVar</code> が実行される前に例外が投げられてしまうので <code>wait</code> における <code>readMVar</code> が永遠にスレッドをブロックしてしまいます</p>
<p>これを安全な挙動に変えるために <code>Async</code> 周りの実装を修正してみしましょう</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls4.hs</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MVar</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SomeException</span> a))</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">async ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a)</span>
<span id="cb9-6">async action <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb9-7">  var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb9-8">  forkIO (try action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar var)</span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitCatch ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SomeException</span> a)</span>
<span id="cb9-12">waitCatch (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> readMVar var</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">wait ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb9-15">wait a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb9-16">  r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> waitCatch a</span>
<span id="cb9-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">of</span></span>
<span id="cb9-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> e  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> throwIO e</span>
<span id="cb9-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> a</span></code></pre></div>
</div>
<p><code>async</code> と <code>wait</code> は以前のものと同じ型ですが、例外を適切に伝搬する仕組みを備えています</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example5 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb10-2">example5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb10-3">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL') sites</span>
<span id="cb10-4">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb10-6"></span>
<span id="cb10-7">example5</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>: </code></pre>
</div>
</div>
<p>最初に非同期処理が例外を投げた時点でプログラム全体が停止しているのが分かります</p>
</section>
<section id="非同期処理の合流" class="level2">
<h2 class="anchored" data-anchor-id="非同期処理の合流">非同期処理の合流</h2>
<p>ここでは並行に実行している非同期処理のどれか一つでも結果を返した時点で何らかの処理を行いたいような場合について見ていきます。</p>
<p>以下の例は並行に複数のWebサイトをダウンロードして</p>
<ul>
<li>最初にダウンロードが完了したWebサイトの情報を表示する</li>
<li>残りのダウンロードが完了するのを待つ</li>
</ul>
<p>という挙動を実装しています。</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls5.hs</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example6 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb12-6">example6 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb12-7">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb12-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> download url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb12-9">        r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL url</span>
<span id="cb12-10">        putMVar m (url, r)</span>
<span id="cb12-11"></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> (forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> download) sites</span>
<span id="cb12-13">  </span>
<span id="cb12-14">  (url, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m</span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (B.length r)</span>
<span id="cb12-16">  replicateM_ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> (takeMVar m)</span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 実行するたびに結果が変わる</span></span>
<span id="cb12-19">example6</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>"http://www.wikipedia.com/wiki/Shovel: 36"</code></pre>
</div>
</div>
<p>これを明示的に <code>MVar</code> を用いずに <code>Async</code> を使って実装する事を考えましょう。</p>
<p>以下の <code>waitEither</code> は2つの <code>Async</code> を受け取って最初に完了した値を <code>IO</code> で返す関数です。</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitEither ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> a b)</span>
<span id="cb14-2">waitEither a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb14-3">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb14-4">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span>  (wait a)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb14-5">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (wait b)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb14-6">  wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> m)</span></code></pre></div>
</div>
<p>この仕組は複数の <code>Async</code> のリストにも拡張することができます</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitAny ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb15-2">waitAny as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb15-3">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb15-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> forkwait a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (wait a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> forkwait as</span>
<span id="cb15-6">  wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> m)</span>
<span id="cb15-7"></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 勉強会中に逆に全てのAsyncを待つようなコンビネータが作れるか？という質問があったので実装してみた例</span></span>
<span id="cb15-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitAll ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> [a]</span>
<span id="cb15-11">waitAll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait</span></code></pre></div>
</div>
<p>以上の実装を使って <code>example6</code> は明示的に <code>MVar</code> を使わない形で書き換えることができます。</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls6.hs</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example7 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb16-4">example7 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb16-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> download url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb16-6">        r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL url</span>
<span id="cb16-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (url, r)</span>
<span id="cb16-8"></span>
<span id="cb16-9">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> download) sites</span>
<span id="cb16-10">  </span>
<span id="cb16-11">  (url, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> waitAny as</span>
<span id="cb16-12">  </span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (B.length r)</span>
<span id="cb16-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> wait as</span>
<span id="cb16-15"></span>
<span id="cb16-16">example7</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>"http://www.wikipedia.com/wiki/Spade: 35"</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-06-29/</guid>
  <pubDate>Sun, 28 Jun 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>GHCi の :sprint が便利</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-04-12/</link>
  <description><![CDATA[ 





<p>これは<a href="https://eigenspace.connpass.com/event/172164/">『Haskellによる並列・並行プログラミング』リモート輪講 #1</a>で学んだことのメモです。</p>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:sprint"><code>:sprint</code></a>は変数の評価を”行わずに”その内容を表示する機能。これを使えばサンクのまま詰まれていてまだ評価されていない部分も確認することができる</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = _
</span>
</div>
</div>
<p>↑アンダースコアはサンクを表しておりxがまだ評価されていないことが分かる</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1">x</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>3</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = 3
</span>
</div>
</div>
<p>↑<code>x</code>が評価されたので中身も見えるようになった</p>
<p>次は変数が変数を参照している例</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb4-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint y</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = _
</span>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">y = _
</span>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> y ()</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint y</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = 3
</span>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">y = 4
</span>
</div>
</div>
<p>↑<code>seq</code>を使うと第一引数が弱頭部正規形（最初の構成子が見えるところ）まで強制的に評価される</p>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb7-2">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x, x)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = _
</span>
</div>
</div>
<p>あれ？これはへいへいHaskellでは <code>z = (_, _)</code> と見えるはずなんだけど違う結果になってしまった。</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Tuple</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> swap (x, x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = _
</span>
</div>
</div>
<div id="cell-12" class="cell" data-scrolled="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> z ()</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = (_,_)
</span>
</div>
</div>
<p>↑今度はうまくタプルの構成子が見えるところまで評価された</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> x ()</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = (_,3)
</span>
</div>
</div>
<p>↑<code>x</code>だけ評価すると<code>3</code>が見えるようになった。<code>z</code>が評価されていないので<code>x + 1</code>の部分はサンク<code>_</code>のままである</p>
<p>今度はリストと <code>map</code> を使ったときの挙動を見てみる</p>
<div id="cell-16" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>]</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = _
</span>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> xs ()</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = _ : _
</span>
</div>
</div>
<p>↑<code>:</code>はリストの構成子なのでここが弱頭部正規形</p>
<div id="cell-19" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>10</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = [_,_,_,_,_,_,_,_,_,_]
</span>
</div>
</div>
<p>↑<code>length</code>は中身を評価しないので構造だけが評価されて中はサンクのまま</p>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> xs</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>65</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = [2,3,4,5,6,7,8,9,10,11]
</span>
</div>
</div>
<p>↑これで全部評価された</p>
<p><code>:sprint</code> を使うとHaskellの遅延評価で何がどこまで評価されるのかインタラクティブに分かるので面白い。</p>



 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-04-12/</guid>
  <pubDate>Sat, 11 Apr 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>高速フーリエ変換を実装してみた</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/</link>
  <description><![CDATA[ 





<p><a href="https://caddi.tech/archives/836">高速フーリエ変換の実装を難しそうかなと思っている方が、なんだ簡単じゃないですか！！ となるための実装講座です</a> という記事が分かりやすかったのでHaskellでも実装してみました</p>
<section id="離散フーリエ変換" class="level2">
<h2 class="anchored" data-anchor-id="離散フーリエ変換">離散フーリエ変換</h2>
<p>まずは普通のフーリエ変換を実装します</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Complex</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb1-4">fourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb1-6">      f aj i j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> aj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb1-7">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldr</span> (\(j, aj) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) (f aj i j)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">inverseFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb1-10">inverseFourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb1-12">      f aj i j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> aj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb1-13">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldr</span> (\(j, aj) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) (f aj i j)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n</span></code></pre></div>
</div>
<p>元に戻ることを確認。これは気が向いたらQuickCheckで書き直したい</p>
<div id="cell-5" class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1">inverseFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fourierTransform [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1.0000000000000002 :+ 5.551115123125783e-16,2.0 :+ 3.885780586188048e-16,3.0 :+ 5.551115123125783e-17,4.0 :+ (-3.3306690738754696e-16)]</code></pre>
</div>
</div>
</section>
<section id="高速フーリエ変換" class="level2">
<h2 class="anchored" data-anchor-id="高速フーリエ変換">高速フーリエ変換</h2>
<p>高速フーリエ変換はフーリエ変換の計算を分割して再帰的に計算するので関数型プログラミングと相性が良さそうかなと思ったけど実装は泥臭い感じになりました。うまいやり方とかあったらTwitterでこっそり教えて下さい</p>
<p>あと単純な実装なので2の累乗の長さのリストでしかうまく行かないやつです。</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Arrow</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">splitEvenOdd ::</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> ([a], [a])</span>
<span id="cb4-4">splitEvenOdd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">***</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> go ([], [])</span>
<span id="cb4-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> go x [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb4-6">        go (xs, ys) [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs, ys)</span>
<span id="cb4-7">        go (xs, ys) (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>zs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> go (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ys) zs</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">mapTuple2 ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a, a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (b, b)</span>
<span id="cb4-10">mapTuple2 f (a1, a2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (f a1, f a2)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fastFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb4-13">fastFourierTransform []  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of list must be the power of 2."</span></span>
<span id="cb4-14">fastFourierTransform [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [x]</span>
<span id="cb4-15">fastFourierTransform xs  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb4-17">      (bs, cs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mapTuple2 fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> splitEvenOdd xs</span>
<span id="cb4-18">      atN2 xs i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`mod`</span> (n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-19">      f i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> bs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb4-20">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> f [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">inverseFastFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb4-23">inverseFastFourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ifft xs</span>
<span id="cb4-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb4-25">    ifft []  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of list must be the power of 2."</span></span>
<span id="cb4-26">    ifft [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [x]</span>
<span id="cb4-27">    ifft xs  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-28">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb4-29">          (bs, cs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mapTuple2 ifft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> splitEvenOdd xs</span>
<span id="cb4-30">          atN2 xs i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`mod`</span> (n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-31">          f i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> bs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb4-32">       <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> f [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>これも元に戻ることを確認</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1">inverseFastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fastFourierTransform [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1.0 :+ 4.057416247971343e-16,2.0 :+ 9.385873628418619e-17,3.0 :+ 8.411709486180696e-17,4.0 :+ (-2.1632341619892149e-16)]</code></pre>
</div>
</div>
</section>
<section id="実験ローパスフィルタ" class="level2">
<h2 class="anchored" data-anchor-id="実験ローパスフィルタ">実験：ローパスフィルタ</h2>
<p>実装したFFTでうまく周波数の空間に変換できてるのか確認します。低周波と高周波を合成した信号を作成し、低周波成分だけ取り出してみます。</p>
<div id="cell-11" class="cell" data-scrolled="false" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">signal ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb7-4">signal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>]</span>
<span id="cb7-5"></span>
<span id="cb7-6">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmal"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] signal])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>実行した高速フーリエ変換で変換して周波数空間での様子を確認</p>
<div id="cell-13" class="cell" data-scrolled="false" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fSignal ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb8-2">fSignal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) signal</span>
<span id="cb8-3"></span>
<span id="cb8-4">fSignalR,<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> fSignalI ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb8-5">fSignalR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> realPart fSignal</span>
<span id="cb8-6">fSignalI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> imagPart fSignal</span>
<span id="cb8-7"></span>
<span id="cb8-8">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb8-9">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fSignalR"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] fSignalR])</span>
<span id="cb8-10">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fSignalI"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] fSignalI])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>ローパスフィルタは、フーリエ変換して先頭からN個の成分以外を0にして逆フーリエ変換するように実装する</p>
<p>想定通りに低周波成分だけ取り出すことができた。なんだ簡単じゃないですか！！</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">consider ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]</span>
<span id="cb9-2">consider _ []     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-3">consider <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> xs     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-4">consider n (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> consider (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) xs</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">lowPassFilter ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb9-7">lowPassFilter n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> realPart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> inverseFastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> consider n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">signal' ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb9-10">signal' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> lowPassFilter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> signal</span>
<span id="cb9-11"></span>
<span id="cb9-12">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal'"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] signal'])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>高速フーリエ変換、完全に理解した。</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/</guid>
  <pubDate>Sat, 28 Mar 2020 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
