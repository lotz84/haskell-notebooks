<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>lotz&#39;s Haskell notebooks</title>
<link>https://lotz84.github.io/haskell-notebooks/</link>
<atom:link href="https://lotz84.github.io/haskell-notebooks/index.xml" rel="self" type="application/rss+xml"/>
<description>IHaskellで書いたnotebookを公開する場所</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Sat, 19 Oct 2024 15:00:00 GMT</lastBuildDate>
<item>
  <title>微分可能な比較演算子でライフゲームを逆算する</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/</link>
  <description><![CDATA[ 





<p><a href="https://hardmath123.github.io/conways-gradient.html">“Conway’s Gradient of Life”</a> という記事に、ライフゲームを逆算する手法について書かれており、面白かったので私も自分で試してみることにしました。ライフゲームは、セル・オートマトンと呼ばれる2次元のグリッド上で動作するシミュレーションで、各セルは隣接するセルの状態に応じて次のステップでの生死の状態が決定します。ライフゲームを「逆算する」とは、ある特定のパターンに至る前の状態を推定することを意味します。つまり、1ステップ進めるとある形に収束する状態を、その形から逆に探し出す課題です。</p>
<p>今回は、ライフゲームのルールに基づいて1ステップ進めた時に、私のアイコンが現れるような初期状態を求めてみたいと思います。このテーマは以前、<a href="https://www.kaggle.com/c/conways-reverse-game-of-life-2020">Kaggleのコンペ</a>でも扱われていたことがあったり、調べてみるといくつかのアプローチが存在します。例えば、<a href="https://proc-cpuinfo.fixstars.com/2021/03/kaggle-conways-reverse-game-of-life-2020/">焼きなまし法を用いたもの</a>、<a href="https://vigne-cla.com/9-9/">遺伝的アルゴリズムを用いたもの</a>、<a href="https://www.youtube.com/watch?v=g8pjrVbdafY">SMTソルバーを駆使したもの</a>、さらに<a href="https://www2.stat.duke.edu/~sayan/561/2020/projects/writeup/Li,%20Dennis(dkl12@duke.edu)/Submission%20attachment(s)/solution.pdf">状態にベルヌーイ分布を仮定した確率モデルをMCMCで推定する方法</a>などがありました。</p>
<p>本稿では、基本的には元の記事と同じアプローチを取り、ライフゲームの時間発展に使用されているルールを微分可能な形式に緩和し、これを勾配降下法による最適化問題として解くことにします。</p>
<section id="ライフゲームの実装" class="level2">
<h2 class="anchored" data-anchor-id="ライフゲームの実装">ライフゲームの実装</h2>
<p>ライフゲームのようなセル・オートマトンはコモナドを使って実装することができます。この話は以前<a href="https://qiita.com/lotz/items/fbc4788b8ea8313cbf76">『コモナドを使った抽象化の威力をライフゲームで試してみた』</a>という記事に書きました。本稿でもその実装を使用するので詳しい仕組みの解説は記事に譲るとします。ただ記事の実装は無限に広がった盤面を仮定していたので、今回は有界で端が存在する盤面を扱うために以下の実装では適切な修正を加えています。</p>
<p>まずは盤面の基礎となるリストのZipperとその関数の実装です。</p>
<div id="07f9a3e2-44d2-41b7-8b5e-f194ea611e31" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Comonad</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.List</span> (unfoldr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | List Zipper</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">data</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> [a] a [a]</span>
<span id="cb1-6">           <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">deriving</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Show</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Foldable</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Traversable</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Comonad</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb1-9">  extract (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> _ a _) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb1-10">  duplicate z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (iterate1 left z) z (iterate1 right z)</span>
<span id="cb1-11">  extend f z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> iterate1 left z) (f z) (f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> iterate1 right z)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 注目している要素をひとつ左にずらす</span></span>
<span id="cb1-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">left ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a)</span>
<span id="cb1-15">left (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> [] _ _) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<span id="cb1-16">left (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ls) c rs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls l (c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>rs))</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 注目している要素をひとつ右にずらす</span></span>
<span id="cb1-19"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">right ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a)</span>
<span id="cb1-20">right (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> _ _ []) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<span id="cb1-21">right (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls c (r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>rs)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ls) r rs)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 値を複製する</span></span>
<span id="cb1-24"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">dup ::</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a, a)</span>
<span id="cb1-25">dup x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x, x)</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 関数を返り値がNothingになるまで繰り返し適用したリストを作成する関数</span></span>
<span id="cb1-28"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">iterate1 ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]</span>
<span id="cb1-29">iterate1 f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unfoldr (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> dup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> f)</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | リストから Z a に変換する</span></span>
<span id="cb1-32"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">toZ ::</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a</span>
<span id="cb1-33">toZ [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toZ can't take an empty list."</span></span>
<span id="cb1-34">toZ (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> [] x xs</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | Z a からリストに変換する</span></span>
<span id="cb1-37"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unZ ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]</span>
<span id="cb1-38">unZ (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls c rs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> [c] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> rs</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | zip の Z a 版</span></span>
<span id="cb1-41"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">zipZ ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (a, b)</span>
<span id="cb1-42">zipZ (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls1 c1 rs1) (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls2 c2 rs2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ls1 ls2) (c1, c2) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> rs1 rs2)</span>
<span id="cb1-43"></span>
<span id="cb1-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | zipWith の Z a 版</span></span>
<span id="cb1-45"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">zipZWith ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> c) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> c</span>
<span id="cb1-46">zipZWith f za zb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uncurry</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> zipZ za zb</span></code></pre></div>
</div>
<p>次に盤面の型となる <code>Z2 a</code> とその関数を実装します。</p>
<div id="1cc3beb1-3a15-4744-b964-fd033ce2effa" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--   ライフゲームの盤面を表す型</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a))</span>
<span id="cb2-3">           <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">deriving</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Show</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Foldable</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Traversable</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Comonad</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb2-6">  extract (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> zz) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> extract (extract zz)</span>
<span id="cb2-7">  duplicate (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> zz) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> roll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> roll zz</span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb2-9">      roll zz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (iterate1 (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> left) zz) zz (iterate1 (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> right) zz)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | リストから Z2 a に変換する</span></span>
<span id="cb2-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">toZ2 ::</span> [[a]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a</span>
<span id="cb2-13">toZ2 [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toZ2 can't take an empty list."</span></span>
<span id="cb2-14">toZ2 (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> [] (toZ x) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> toZ xs))</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | Z2 a からリストに変換する</span></span>
<span id="cb2-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unZ2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [[a]]</span>
<span id="cb2-18">unZ2 (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> lzs cz rzs)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> unZ lzs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> [unZ cz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> unZ rzs</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | zipWith の Z2 a 版</span></span>
<span id="cb2-21"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">zipZ2With ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> c) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> c</span>
<span id="cb2-22">zipZ2With f (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> lzs1 cz1 rzs1)) (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> lzs2 cz2 rzs2)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (zipZWith f) lzs1 lzs2)</span>
<span id="cb2-24">        (zipZWith f cz1 cz2)</span>
<span id="cb2-25">        (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (zipZWith f) rzs1 rzs2))</span></code></pre></div>
</div>
<p><code>Z a</code> と <code>Z2 a</code> は後に自動微分で使いたいので <code>Traversable</code> のインスタンスまで導出しています。</p>
<p>最後にライフゲームの状態発展を計算する関数を実装しましょう</p>
<div id="efc886a5-89b0-497f-a6c3-b634d36ba61e" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--   空リストに対する操作を安全にする関数</span></span>
<span id="cb3-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">safe ::</span> ([a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> a</span>
<span id="cb3-3">safe f [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<span id="cb3-4">safe f xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> f xs</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 近傍の1列で生きているセルをカウントする関数</span></span>
<span id="cb3-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">countNeighbour ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Trueなら中心もカウントする</span></span>
<span id="cb3-8">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span></span>
<span id="cb3-9">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb3-10">countNeighbour self (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls c rs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span> [</span>
<span id="cb3-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> ls,</span>
<span id="cb3-12">  self <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> c,</span>
<span id="cb3-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> rs</span>
<span id="cb3-14">  ]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 近傍で生きているセルをカウントする関数</span></span>
<span id="cb3-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">countNeighbours ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb3-18">countNeighbours (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> lzs cz rzs)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [</span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maybe</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (countNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>) (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> lzs),</span>
<span id="cb3-20">  countNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span> cz,</span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maybe</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (countNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>) (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> rzs)</span>
<span id="cb3-22">  ]</span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 1セルにおけるライフゲームの状態発展</span></span>
<span id="cb3-25"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">life ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span></span>
<span id="cb3-26">life z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">not</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb3-27">  a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> extract z</span>
<span id="cb3-28">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> countNeighbours z</span></code></pre></div>
</div>
<p>コモナドのメソッド <code>extend</code> と1セルにおける状態発展の関数 <code>life</code> を使って、盤面全体の状態発展の関数は <code>extend life</code> と実装することができます。</p>
<p>実装したライフゲームを使って試しに<a href="https://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC_(%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0)">ブリンカー</a>を動かしてみましょう。</p>
<div id="214501b5-6aa7-411a-b9f8-6616f0093657" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">blinker ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span></span>
<span id="cb4-2">blinker <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> toZ2 [[<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>], [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>], [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span>]]</span>
<span id="cb4-3"></span>
<span id="cb4-4">extend life blinker</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Z2 (Z [] (Z [] False [False,False]) [Z [] True [True,True],Z [] False [False,False]])</code></pre>
</div>
</div>
<div id="27af047f-5220-4d52-ad26-93a08636347f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1">extend life <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life blinker</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Z2 (Z [] (Z [] False [True,False]) [Z [] False [True,False],Z [] False [True,False]])</code></pre>
</div>
</div>
<p>ブリンカーのパタパタする様子が心の目で見えましたでしょうか。</p>
<p><code>Z2 a</code> を標準の出力で確認するには限界があるので画像として扱えるようにしておきましょう。</p>
<div id="3eecfd49-b1f3-4bac-ac95-ab515d637e1f" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Codec.Picture</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 二重リストを画像に変換する関数</span></span>
<span id="cb8-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">stateToImage ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Image</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Pixel8</span></span>
<span id="cb8-5">stateToImage z2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> generateImage pixelRenderer width height</span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-7">    lst <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unZ2 z2</span>
<span id="cb8-8">    width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> lst)</span>
<span id="cb8-9">    height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> lst</span>
<span id="cb8-10">    pixelRenderer x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> pixelValue ((lst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> x)</span>
<span id="cb8-11">    pixelValue x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</div>
<div id="922cf3be-d037-4f19-b5dd-92296d7fb951" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1">stateToImage blinker</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="84dab130-e5d6-409f-ac50-8f0241abb4a2" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life blinker</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>状態を1ピクセルにしたのでかなり小さいですが拡大して見て頂ければうまく動いてることがわかると思います。</p>
</section>
<section id="画像の読み込み" class="level2">
<h2 class="anchored" data-anchor-id="画像の読み込み">画像の読み込み</h2>
<p>ここからは今回ライフゲームで逆算するもととなる画像データを読み込んでいきます。画像データは “image.txt” というファイルに以下のような形式で用意しています。</p>
<div id="c3da9ea9-4f8e-41c7-8e51-d4e5814a3bd5" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readFile</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image.txt"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>"w699b11w183b20w177b26w172b31w167b35w163b39w160b45w153b50w148b53w146b55w144b57w142b58w141b64w135b66w2"</code></pre>
</div>
</div>
<p>これは200×200の0と1（白と黒）のビット列を一列にし白（w）が連続して何個並ぶかと黒（b）が連続して何個並ぶかという形式で圧縮したテキストファイルです。要するに画像を<a href="https://ja.wikipedia.org/wiki/%E9%80%A3%E9%95%B7%E5%9C%A7%E7%B8%AE">ランレングス圧縮</a>したものです。今回の画像では生のテキストだと40KB, png画像形式で4KB, ランレングス圧縮だと3KBになり相性が良かったので採用しています。まずはこの圧縮された形式をデコードして画像ファイルに戻してあげましょう。</p>
<div id="f51c7289-a253-4385-89ea-1feb3393d875" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Char</span> (isDigit)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ランレングス圧縮された文字列をデコードする関数</span></span>
<span id="cb13-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">decodeRLE ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span></span>
<span id="cb13-5">decodeRLE [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-6">decodeRLE (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb13-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> (n, rest) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isDigit</span> xs</span>
<span id="cb13-8">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read</span> n) x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> decodeRLE rest</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 与えられたリストをN個ずつのチャンクに分ける関数</span></span>
<span id="cb13-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">chunksOf ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [[a]]</span>
<span id="cb13-12">chunksOf _ [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-13">chunksOf n xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> chunksOf n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span> n xs)</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 画像ファイルを読み込む</span></span>
<span id="cb13-16">targetState <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (toZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> chunksOf <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> decodeRLE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readFile</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image.txt"</span></span></code></pre></div>
</div>
<p>これで <code>targetState</code> に画像がライフゲームの状態として束縛されています。実際に見てみましょう。</p>
<div id="dc5949fc-4fad-4189-9f8e-90b852c407d1" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1">stateToImage targetState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>うまく行っていますね。これはライフゲームの状態でもあるので1ステップ発展させてみましょう。</p>
<div id="74b649ff-7ad6-4e74-b2dd-52ad9378b3c0" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life targetState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>黒が多い部分は過密状態なのでセルが死んでしまっているのが分かりますね。</p>
<p>もう1,2ステップ時間発展させてみましょう。</p>
<div id="c7dfea45-9a44-44f4-bae5-9a91f1ebc7a7" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life targetState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="58d33681-4b6a-4603-b50a-0d15ada991c4" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life targetState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>うわぁ… ライフゲームっぽくなってきましたね😅</p>
</section>
<section id="微分可能なライフゲーム" class="level2">
<h2 class="anchored" data-anchor-id="微分可能なライフゲーム">微分可能なライフゲーム</h2>
<p>さてここからはライフゲームの1つ前の状態を推定することを考えていきたいと思います。この問題を最適化問題として定式化するにあたって誤差関数を考えます。単純に入力となる状態 <img src="https://latex.codecogs.com/png.latex?Y"> を <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20life%7D"> 関数によって時間発展させたときにターゲットとなる画像 <img src="https://latex.codecogs.com/png.latex?X"> との差分の平均二乗誤差を誤差関数としましょう。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(Y)%20=%20%5Cfrac%7B1%7D%7Bn%7D%5C%7CX%20-%20%7B%5Crm%20life%7D(Y)%5C%7C%5E2%0A"></p>
<p>さてこの誤差を最小にするような <img src="https://latex.codecogs.com/png.latex?Y"> を見つけるためには <img src="https://latex.codecogs.com/png.latex?L"> を <img src="https://latex.codecogs.com/png.latex?Y"> で微分する必要がありますが、そのためには <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20life%7D"> が微分可能な関数である必要があります。しかし状態は真偽値であり <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20life%7D"> は論理式で構成されているため微分可能な関数ではありません。</p>
<p>そこでファジィ論理や確率論理と同様に真偽値を <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> の値として連続的に扱えるように拡張しましょう。その場合に論理式やプログラムの制御構文がどのように微分可能な形に拡張できるかについては <a href="https://arxiv.org/abs/2403.14606">“The Elements of Differentiable Programming”</a> の5章 Control flows に詳細な記述があります。</p>
<p>例えば真偽値を <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201%5C%7D"> とすると2つの実数を比較して1つ目の数が2つ目の数より大きいかどうかを返す関数 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20gt%7D(x,%20y)"> は</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmatrix%7D%0A%7B%5Crm%20gt%7D(x,%20y)%20&amp;=&amp;%20%5Cbegin%7Bcases%7D%0A1,%5C%20%7B%5Crm%20if%7D%5C%20x%5Cgeq%20y%5C%5C%0A0,%5C%20%7B%5Crm%20otherwise%7D%5C%5C%0A%5Cend%7Bcases%7D%20%5C%5C%0A&amp;=&amp;%20%7B%5Crm%20step%7D(x-y)%0A%5Cend%7Bmatrix%7D%0A"></p>
<p>のように書けます。 ここで <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20step%7D"> 関数は以下のように定義されているものです。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20step%7D(x)%20=%20%5Cbegin%7Bcases%7D%0A1,%5C%20%7B%5Crm%20if%7D%5C%20x%20%5Cgeq%200%5C%5C%0A0,%5C%20%7B%5Crm%20otherwise%7D%20%5C%5C%0A%5Cend%7Bcases%7D%0A"></p>
<p>これを <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> に値を取るように微分可能な形に緩和すると <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20step%7D"> 関数をシグモイド関数 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20sigmoid%7D"> にするのがすぐに思いつく方法でしょう。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20sigmoid%7D_D(x)%20=%20%5Cfrac%7B1%7D%7B1+%5Cexp%5Cleft(-%5Cfrac%7Bx%7D%7BD%7D%5Cright)%7D%0A"></p>
<p>これを使って微分可能な形に緩和した比較関数 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20gt%7D_D(x,%20y)"> を</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20gt%7D_D(x,%20y)%20=%20%7B%5Crm%20sigmoid%7D_D(x-y)%0A"></p>
<p>と定義します。実はシグモイド関数に置き換えたこの関数は変数がある確率分布に従うと仮定して期待値をとったものと解釈することも可能です。</p>
<p>同様の方法で”小なり”や”等号”に対応する関数を定義することも可能です。（先に挙げた<a href="https://arxiv.org/abs/2403.14606">“The Elements of Differentiable Programming”</a>で <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20lt%7D(x,%20y)%20=%201%20-%20%7B%5Crm%20gt%7D(x,%20y)"> と定義されており、これだと後述する否定を使って <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20lt%7D(x,%20y)%20=%20%7B%5Crm%20not%7D(%7B%5Crm%20gt%7D(x,%20y))"> と書けるため等号部分が異なる気がするのですが、この部分は微分可能な形に緩和すれば確率0で気にならなくなるので本稿でも同様に実装することにします。）</p>
<p><img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> に値を取る真偽値の論理演算子は以下のように定義することができます。</p>
<p>まず否定 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20not%7D"> は0を1に、1を0に移すので単純に1からの減算と考えれるでしょう。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20not%7D(x)%20=%201%20-%20x%0A"></p>
<p>次に論理積 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20and%7D(x,%20y)"> は <img src="https://latex.codecogs.com/png.latex?x,%20y"> いずれかの値が0なら0になり両方が1なら1になります。単純な積はこの性質を満たしていることがわかるでしょう。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20and%7D(x,%20y)%20=%20xy%0A"></p>
<p>次に論理和 <img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20or%7D(x,%20y)"> は <img src="https://latex.codecogs.com/png.latex?x,%20y"> いずれかの値が1なら1になり両方が0なら0になります。このような性質を満たす計算を見つけるのは簡単ではありませんが、既に否定と論理積があるのでド・モルガンの法則を使って</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmatrix%7D%0A%7B%5Crm%20or%7D(x,%20y)%20&amp;=&amp;%20%7B%5Crm%20not%7D(%7B%5Crm%20and%7D(%7B%5Crm%20not%7D(x),%20%7B%5Crm%20not%7D(y)))%20%5C%5C%0A&amp;=&amp;%201%20-%20(1-x)(1-y)%20%5C%5C%0A&amp;=&amp;%20x%20+%20y%20-%20xy%20%5C%5C%0A%5Cend%7Bmatrix%7D%0A"></p>
<p>のように定義できることが分かります。</p>
<p>このように論理和・論理積を <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> に拡張したものは代数和・代数積と呼ばれていて実は上記の定義以外にも無数に存在することが知られています。気になる人は以下を参照してみてください。</p>
<ul>
<li><a href="https://mathlog.info/articles/145">ファジィ理論とその応用 | Mathlog</a></li>
<li><a href="https://en.wikipedia.org/wiki/T-norm">T-norm - Wikipedia</a></li>
</ul>
<p><code>if</code> などの制御構文も微分可能な形に実装することができますが、今回のライフゲームの実装では必要ありません。上記を参考に微分可能な比較演算子と論理演算子を実装してみましょう。</p>
<div id="1d253404-ad65-4fe7-aceb-1154c3aadd65" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--   x &gt; y</span></span>
<span id="cb18-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">gtD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-3">gtD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y)))</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x &lt; y</span></span>
<span id="cb18-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">ltD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-7">ltD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> gtD x y</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x == y</span></span>
<span id="cb18-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">eqD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-11">eqD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | !x</span></span>
<span id="cb18-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">notD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-15">notD x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x</span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x &amp;&amp; y</span></span>
<span id="cb18-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">andD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-19">andD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb18-20"></span>
<span id="cb18-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x || y</span></span>
<span id="cb18-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">orD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-23">orD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb18-24"></span>
<span id="cb18-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x ≧ y</span></span>
<span id="cb18-26"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">geqD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-27">geqD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> eqD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`orD`</span> gtD x y</span>
<span id="cb18-28"></span>
<span id="cb18-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x ≦ y</span></span>
<span id="cb18-30"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">leqD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb18-31">leqD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> eqD x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`orD`</span> ltD x y</span></code></pre></div>
</div>
<p><code>gtD</code> と <code>ltD</code> は引数が一致する場合に値が <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> となるため等号のない <img src="https://latex.codecogs.com/png.latex?%3E,%20%3C"> を表していると解釈し、等号も含めた演算子 <img src="https://latex.codecogs.com/png.latex?%5Cgeq,%20%5Cleq"> を別途 <code>geqD, leqD</code> として実装しています。</p>
<p>それではこれらの演算子を使ってライフゲームの微分可能な状態発展を実装してみましょう。</p>
<div id="0ef19698-077b-45d4-95fd-2518df3d5129" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Maybe</span> (fromMaybe)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 近傍の1列で生きているセルを合計する関数</span></span>
<span id="cb19-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">sumNeighbour ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a</span>
<span id="cb19-5">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Trueなら中心もカウントする</span></span>
<span id="cb19-6">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> a</span>
<span id="cb19-7">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb19-8">sumNeighbour self (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> ls c rs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [</span>
<span id="cb19-9">  fromMaybe <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> ls),</span>
<span id="cb19-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> self <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb19-11">  fromMaybe <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> rs)</span>
<span id="cb19-12">  ]</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 近傍で生きているセルを合計する関数</span></span>
<span id="cb19-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">sumNeighbours ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a</span>
<span id="cb19-16">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a</span>
<span id="cb19-17">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb19-18">sumNeighbours (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z</span> lzs cz rzs)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [</span>
<span id="cb19-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maybe</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (sumNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>) (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> lzs),</span>
<span id="cb19-20">  sumNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span> cz,</span>
<span id="cb19-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maybe</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (sumNeighbour <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">True</span>) (safe <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> rzs)</span>
<span id="cb19-22">  ]</span>
<span id="cb19-23"></span>
<span id="cb19-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 1セルにおけるライフゲームの微分可能な状態発展</span></span>
<span id="cb19-25"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">lifeD ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb19-26">lifeD z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`andD`</span> (geqD n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`andD`</span> leqD n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`orD`</span> (notD a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`andD`</span> eqD n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb19-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb19-28">    a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> extract z</span>
<span id="cb19-29">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sumNeighbours z</span></code></pre></div>
</div>
<p><code>lifeD</code> の実装をよく見ると <code>Bool</code> に対する <code>life</code> の実装とよく対応していることが分かります。</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode hs code-with-copy"><code class="sourceCode haskell"><span id="cb20-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">life ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Z2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span></span>
<span id="cb20-2">life z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">not</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb20-3">  a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> extract z</span>
<span id="cb20-4">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> countNeighbours z</span></code></pre></div>
<p>実際に <code>lifeD</code> を使ってライフゲームを状態発展させてみましょう。</p>
<div id="f37e6f8e-1e89-41bf-9aeb-62027c3cf8df" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb21-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend lifeD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> (\b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> targetState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>先程見た結果と一致していそうですね。</p>
</section>
<section id="つ前の状態を推定する" class="level2">
<h2 class="anchored" data-anchor-id="つ前の状態を推定する">1つ前の状態を推定する</h2>
<p>それでは勾配降下法を使って目標となる画像に発展する1つ前の状態を求めてみましょう。入力となるセルの値が <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D"> だと途中で範囲外に出てしまう可能性があるため、値は実数を取れるようにしてシグモイド関数で <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> に含まれるように変換することにします。自動微分には <a href="https://hackage.haskell.org/package/ad">ad</a> ライブラリを使用しています。</p>
<div id="80f87c29-0a79-486d-baab-4bc34aedf290" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Function</span> (fix)</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.AD</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random</span> (randomIO)</span>
<span id="cb22-6"></span>
<span id="cb22-7"></span>
<span id="cb22-8">(resultState, losses) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb22-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 初期状態をランダムに作成</span></span>
<span id="cb22-10">  initialState <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> toZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> chunksOf <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequence</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) randomIO)</span>
<span id="cb22-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ターゲットとなる画像を Z2 Float に変換</span></span>
<span id="cb22-12">      target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (\b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> targetState</span>
<span id="cb22-13">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 定義域を [0, 1] から実数全体にするためシグモイド関数で変換する</span></span>
<span id="cb22-14">      sigmoid x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span>
<span id="cb22-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 誤差関数</span></span>
<span id="cb22-16">      loss state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> zipZ2With (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>) target (extend lifeD (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> sigmoid state))</span>
<span id="cb22-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- エポック数</span></span>
<span id="cb22-18">      epoch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12000</span></span>
<span id="cb22-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 初期値の誤差を表示する</span></span>
<span id="cb22-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concat</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial, loss = "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (loss target)]</span>
<span id="cb22-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 勾配降下法で最適化を行う</span></span>
<span id="cb22-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> fix (initialState, epoch, []) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \loop (state, n, losses) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb22-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb22-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- n が 0 になったら結果を整形して終了</span></span>
<span id="cb22-25">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> sigmoid state, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span> losses)</span>
<span id="cb22-26">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb22-27">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 勾配降下法</span></span>
<span id="cb22-28">            state' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> zipZ2With (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>) state (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) (grad loss state))</span>
<span id="cb22-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 誤差の評価</span></span>
<span id="cb22-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> loss state'</span>
<span id="cb22-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 定期的に進捗をログに出力する</span></span>
<span id="cb22-32">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod</span> n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb22-33">          <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concat</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n = "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", loss = "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> l]</span>
<span id="cb22-34">          <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> ()</span>
<span id="cb22-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 状態を更新してループする</span></span>
<span id="cb22-36">        loop (state', n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>losses)</span>
<span id="cb22-37"></span>
<span id="cb22-38">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] losses])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>initial, loss = 14174.446314774947
n = 0, loss = 12437.558591909137
n = 1000, loss = 669.9011793628988
n = 2000, loss = 581.6638456947436
n = 3000, loss = 547.3427997406984
n = 4000, loss = 524.5258231500682
n = 5000, loss = 511.03811378437507
n = 6000, loss = 500.1939355743127
n = 7000, loss = 489.87961196569944
n = 8000, loss = 484.3542493674258
n = 9000, loss = 479.40304896751013
n = 10000, loss = 476.66751555896707
n = 11000, loss = 474.38607336184685</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-19-output-2.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>グラフから誤差を小さくできていることが分かりますね👏 ループの部分は<a href="https://qiita.com/lotz/items/0894079a44e87dc8b73e"><code>flip fix</code> を使って</a>雑に書いていますが適切なfold系の関数を使って実装することも可能でしょう。</p>
<p>得られた結果がどうなっているか確認しましょう。</p>
<div id="3d1a802d-d0fb-45f2-9886-9f22843c0406" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb24-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) resultState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>既にかなり面影があります😅 これをライフゲームとして1ステップ状態発展させてみましょう。</p>
<div id="e5388f44-0acf-4c43-a334-3d8c1da65397" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb25-1">stateToImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> extend life <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) resultState</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>見事目標としていた画像に近いパターンが得られています。</p>
<p>ライフゲームのルール上黒いベタ塗りなどは表現しにくいのですが、<a href="https://hardmath123.github.io/conways-gradient.html">元記事</a>でも指摘されているように1つ前の状態としてチューリング・パターンのような模様が現れているのは不思議ですよね👀</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-10-20/</guid>
  <pubDate>Sat, 19 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>行列式がフィボナッチ数列になる行列</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-10-12/</link>
  <description><![CDATA[ 





<p>フィボナッチ数列</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1,%202,%203,%205,%208,%2013,%2021,%20%5Cdots%0A"></p>
<p>の第n項を <img src="https://latex.codecogs.com/png.latex?F_n"> と置くと、<img src="https://latex.codecogs.com/png.latex?i"> を純虚数として <img src="https://latex.codecogs.com/png.latex?i,%201,%20i"> が並ぶ以下のような <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> の三重対角行列の行列式は <img src="https://latex.codecogs.com/png.latex?F_n"> に一致します。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%5C%5C%0Ai%20&amp;%201%20&amp;%20i%20%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%5C%5C%0A%20%20&amp;%20i%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20&amp;%20%20%20%5C%5C%0A%20%20&amp;%20%20%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20&amp;%20i%20%20%5C%5C%0A%20%20&amp;%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20i%20%20%20%20%20%20&amp;%201%0A%5Cend%7Bmatrix%7D%5Cright%7C%20=%20F_n%0A"></p>
<p>行列の数字が書かれていない要素は0です。まずはこの事実を計算して確かめてみましょう。</p>
<section id="行列式の余因子展開" class="level2">
<h2 class="anchored" data-anchor-id="行列式の余因子展開">行列式の余因子展開</h2>
<p>本稿では行列の実装として二重リストを使用します。</p>
<div id="f033d6ff-74b2-4f4c-b01e-c7c7f49d4a8d" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 行列</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [[a]]</span></code></pre></div>
</div>
<p>後々必要になるので、先に行列を整形して表示する関数も用意しておきましょう。</p>
<div id="bbb8a07e-db9c-4285-a811-7d82fa8e2b4b" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.List</span> (intercalate)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列を整形して表示する</span></span>
<span id="cb2-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">displayM ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Show</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb2-5">displayM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> intercalate <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\n"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unwords</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span>)</span></code></pre></div>
</div>
<p>行列式を効率よく計算するにはLU分解を使用するのが良いですが、今回はシンプルに<a href="https://ja.wikipedia.org/wiki/%E4%BD%99%E5%9B%A0%E5%AD%90%E5%B1%95%E9%96%8B">行列式の余因子展開</a>を使って再帰的に計算します。</p>
<div id="0f22e6e2-92c9-4b7b-8939-a6e3de1e3665" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 行列式</span></span>
<span id="cb3-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">det ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb3-3">det [[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb3-4">det xss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldr1</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) col1 (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> det (minors cols)))</span>
<span id="cb3-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb3-6">    col1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> xss</span>
<span id="cb3-7">    cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> xss</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 与えられたリストから要素を一つ除いたリストのリストを生成する</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | &gt;&gt;&gt; minors [1,2,3,4]</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- [[2,3,4],[1,3,4],[1,2,4],[1,2,3]]</span></span>
<span id="cb3-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">minors ::</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [[a]]</span>
<span id="cb3-13">minors []     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-14">minors (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>) (minors xs)</span></code></pre></div>
</div>
<p>こちらの実装は<a href="https://amzn.to/4h4vele">『関数プログラミング 珠玉のアルゴリズムデザイン』</a>で紹介されているものを元にしており、同書の「行列式の3つの計算法」という章では他にも面白い行列式の計算方法が解説されているので気になる人はぜひ読んでみてください。</p>
<p>簡単な例で実際に行列式が計算できることを確かめてみましょう。</p>
<div id="92f47bc3-9f34-464b-8ace-02880a48efbc" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1">det [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>-2</code></pre>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?1%5Ctimes%204%20-%202%5Ctimes%203%20=%20-2"> なので正解ですね。</p>
<p>次に行列式がフィボナッチ数列となる行列を生成する関数を実装しましょう。</p>
<p>まずは複素数を用意します。</p>
<div id="e957565b-6a9a-449f-bba9-f3a60ed86e24" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Complex</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 複素数</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 純虚数</span></span>
<span id="cb6-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">i ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> </span>
<span id="cb6-8">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?i,%201,%20i"> が並ぶような <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> の三重対角行列を生成する関数 <code>fibM</code> を実装します。</p>
<div id="d86587d1-fa4d-4b3b-beeb-9edae5a75277" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 行列式がフィボナッチ数列となるn次行列</span></span>
<span id="cb7-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fibM ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb7-3">fibM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]]</span>
<span id="cb7-4">fibM n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> fibM' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fibM (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-6">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> fibM') <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> fibM')</span></code></pre></div>
</div>
<p>実際に想定通りの行列が生成されているか確認してみましょう</p>
<div id="a9537e6a-b0a0-484a-81df-f1e17aee3c84" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1">displayM (fibM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0 :+ 0.0 0.0 :+ 1.0
0.0 :+ 1.0 1.0 :+ 0.0</code></pre>
</div>
</div>
<div id="20528e7c-c7ba-4ff4-8212-96b9515f9e78" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1">displayM (fibM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0 :+ 0.0 0.0 :+ 1.0 0.0 :+ 0.0
0.0 :+ 1.0 1.0 :+ 0.0 0.0 :+ 1.0
0.0 :+ 0.0 0.0 :+ 1.0 1.0 :+ 0.0</code></pre>
</div>
</div>
<div id="a02741bc-fd9c-48f9-bc38-f7ac8947b78d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1">displayM (fibM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0 :+ 0.0 0.0 :+ 1.0 0.0 :+ 0.0 0.0 :+ 0.0
0.0 :+ 1.0 1.0 :+ 0.0 0.0 :+ 1.0 0.0 :+ 0.0
0.0 :+ 0.0 0.0 :+ 1.0 1.0 :+ 0.0 0.0 :+ 1.0
0.0 :+ 0.0 0.0 :+ 0.0 0.0 :+ 1.0 1.0 :+ 0.0</code></pre>
</div>
</div>
<p>少し目がチカチカしますがうまく行ってますね！</p>
<p>それではこれらの行列の行列式を計算してみましょう。</p>
<div id="2a9845c5-23bc-46e8-9161-e0a3217a8144" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> det <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fibM) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0 :+ 0.0
2.0 :+ 0.0
3.0 :+ 0.0
5.0 :+ 0.0
8.0 :+ 0.0
13.0 :+ 0.0
21.0 :+ 0.0
34.0 :+ 0.0
55.0 :+ 0.0
89.0 :+ 0.0</code></pre>
</div>
</div>
<p>実際にフィボナッチ数列が得られることが確認できました！</p>
</section>
<section id="証明" class="level2">
<h2 class="anchored" data-anchor-id="証明">証明</h2>
<p>なぜこのような行列の行列式でフィボナッチ数列が現れるのでしょうか？いくつか具体的に計算して考えてみましょう。</p>
<p>まず2次の行列の場合</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%5C%5C%0Ai%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A"></p>
<p>行列式は <img src="https://latex.codecogs.com/png.latex?1%5Ctimes%201%20-%20i%5Ctimes%20i%20=%202"> で確かに<img src="https://latex.codecogs.com/png.latex?F_2">になります。</p>
<p>次に3次の行列の場合</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%20&amp;%200%5C%5C%0Ai%20&amp;%201%20&amp;%20i%5C%5C%0A0%20&amp;%20i%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A"></p>
<p>1行目を使って行列式の余因子展開を考えると、行列式は</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%5Ctimes%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%5C%5C%0Ai%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A-i%5Ctimes%5Cleft%7C%5Cbegin%7Bmatrix%7D%0Ai%20&amp;%20i%5C%5C%0A0%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A=%201%5Ctimes%20F_2%20-%20i%5Ctimes%20i%20=%203%0A"></p>
<p>で確かに<img src="https://latex.codecogs.com/png.latex?F_3">となります。</p>
<p>そして4次の行列の場合</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%20&amp;%200%20&amp;%200%5C%5C%0Ai%20&amp;%201%20&amp;%20i%20&amp;%200%5C%5C%0A0%20&amp;%20i%20&amp;%201%20&amp;%20i%5C%5C%0A0%20&amp;%200%20&amp;%20i%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A"></p>
<p>1行目を使って行列式の余因子展開を考えると、行列式は</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%5Ctimes%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%20&amp;%200%5C%5C%0Ai%20&amp;%201%20&amp;%20i%5C%5C%0A0%20&amp;%20i%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A-i%5Cleft%7C%5Cbegin%7Bmatrix%7D%0Ai%20&amp;%20i%20&amp;%200%5C%5C%0A0%20&amp;%201%20&amp;%20i%5C%5C%0A0%20&amp;%20i%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A=1%5Ctimes%20F_3%20-%20i%20%5Cleft(%0Ai%5Ctimes%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20i%5C%5C%0Ai%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A-i%5Ctimes%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A0%20&amp;%20i%5C%5C%0A0%20&amp;%201%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A%5Cright)%0A=F_3-i%5Ctimes%20i%5Ctimes%20F_2%0A=F_3+F_2%0A=F_4%0A"></p>
<p>でフィボナッチ数列の定義より確かに<img src="https://latex.codecogs.com/png.latex?F_4">に一致します。</p>
<p>ここまで確認すれば行列式がフィボナッチ数列とどのように対応しているかは明白ですね！</p>
<p>実は三重対角行列の行列式は一般的に</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_n%20=%20%5Cleft%7C%5Cbegin%7Bmatrix%7D%0Aa_1%20&amp;%20b_1%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20%20&amp;%20%5C%5C%0Ac_1%20&amp;%20a_2%20&amp;%20b_2%20%20%20%20&amp;%20%20%20%20%20%20%20%20%20&amp;%20%5C%5C%0A%20%20%20%20&amp;%20c_2%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20%20&amp;%20%5C%5C%0A%20%20%20%20&amp;%20%20%20%20%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20%20&amp;%20b_%7Bn-1%7D%20%5C%5C%0A%20%20%20%20&amp;%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20c_%7Bn-1%7D%20&amp;%20a_n%20%5C%5C%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A"></p>
<p>と置くと</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_n%20=%20a_nf_%7Bn-1%7D%20-%20c_%7Bn-1%7Db_%7Bn-1%7Df_%7Bn-2%7D%0A"></p>
<p>という漸化式で計算できることが知られています（<a href="https://en.wikipedia.org/wiki/Tridiagonal_matrix#Determinant">参考</a>）。フィボナッチ数列を生成する行列はこの漸化式がうまくフィボナッチ数列の漸化式になるように調整されていたんですね。</p>
<p>仕組みが分かれば純虚数<img src="https://latex.codecogs.com/png.latex?i">を使わなくても、例えば以下の様な行列の行列式でフィボナッチ数列が計算できることが分かります。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A1%20&amp;%20-1%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%5C%5C%0A1%20&amp;%201%20%20&amp;%20-1%20%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%20%20%20%5C%5C%0A%20%20&amp;%201%20%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20&amp;%20%20%20%5C%5C%0A%20%20&amp;%20%20%20%20&amp;%20%5Cddots%20&amp;%20%5Cddots%20&amp;%20-1%20%20%5C%5C%0A%20%20&amp;%20%20%20%20&amp;%20%20%20%20%20%20%20%20&amp;%201%20%20%20%20%20%20&amp;%201%0A%5Cend%7Bmatrix%7D%5Cright%7C%0A"></p>
<p>最後のこの行列式がフィボナッチ数列と一致することを確認してみましょう。</p>
<div id="8f5e87ac-1e9b-42c4-97ce-f4d3a19a6463" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fibM2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb16-2">fibM2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb16-3">fibM2 n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb16-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> fibM2' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fibM2 (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-5">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> fibM2') <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> fibM2')</span></code></pre></div>
</div>
<div id="3df1f776-ea0a-4dcc-86e1-6481a044d732" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1">displayM (fibM2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1 -1
1 1</code></pre>
</div>
</div>
<div id="60436a97-3033-4bde-8c26-7885168425fa" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb19-1">displayM (fibM2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1 -1 0
1 1 -1
0 1 1</code></pre>
</div>
</div>
<div id="4280a097-705f-4642-835b-2f7a23576b0a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb21-1">displayM (fibM2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1 -1 0 0
1 1 -1 0
0 1 1 -1
0 0 1 1</code></pre>
</div>
</div>
<p>行列式を計算すると</p>
<div id="1de1e93f-4a2d-48ef-9c67-94b12729155f" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> det <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fibM2) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1
2
3
5
8
13
21
34
55
89</code></pre>
</div>
</div>
<p>フィボナッチ数列に一致することが確認できました👏</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-10-12/</guid>
  <pubDate>Fri, 11 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>ランダムフィボナッチ数列をHaskellで実装する</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-09-26/</link>
  <description><![CDATA[ 





<p><a href="https://en.wikipedia.org/wiki/Random_Fibonacci_sequence">ランダムフィボナッチ数列</a>というフィボナッチ数列の計算にランダム要素を取り入れた数列があります。通常のフィボナッチ数列は <img src="https://latex.codecogs.com/png.latex?x_0%20=%201,%20x_1%20=%201"> から始まり</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_n%20=%20x_%7Bn-1%7D%20+%20x_%7Bn-2%7D%0A"></p>
<p>という漸化式で値が定まりますが、ランダムフィボナッチ数列は初項は同じで漸化式が</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_n%20=%20%5Cbegin%7Bcases%7D%20x_%7Bn-1%7D%20+%20x_%7Bn-2%7D%20%5C%5C%20x_%7Bn-1%7D%20-%20x_%7Bn-2%7D%20%5Cend%7Bcases%7D%0A"></p>
<p>となり±どちらになるかは各項において確率 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> でランダムに決まります。</p>
<p>このランダムフィボナッチ数列には面白い性質が知られていて、数列の増大速度の割合が</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bn%5Crightarrow%5Cinfty%7D%5Csqrt%5Bn%5D%7B%7Cx_n%7C%7D%20=%201.1319882487943%5Cdots%0A"></p>
<p>と一定の値に収束する確率が1となるのです。この値はViswanath定数と呼ばれフラクタル測度を使った積分による解析的な表示が知られているようです（ちなみに通常のフィボナッチ数列の場合、この値は黄金比になります）。</p>
<p>今回はこのランダムフィボナッチ数列を実装しViswanath定数をシミュレーションにより計算してみたいと思います。</p>
<section id="ランダムフィボナッチ数列の実装" class="level2">
<h2 class="anchored" data-anchor-id="ランダムフィボナッチ数列の実装">ランダムフィボナッチ数列の実装</h2>
<p>まずは通常のフィボナッチ数列の実装を思い出しましょう。Haskellによるフィボナッチ数列の実装は<a href="https://wiki.haskell.org/The_Fibonacci_sequence">様々あります</a>が、例えば以下のような方法が有名でしょう。</p>
<div id="2752db89-e282-4083-9025-770df1457d6b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fibs ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span>]</span>
<span id="cb1-2">fibs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> fib [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fib ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span></span>
<span id="cb1-5">fib <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-6">fib <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-7">fib n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fibs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="69a6fb38-8070-4434-bf29-2d0344ed7ac7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> fibs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1,1,2,3,5,8,13,21,34,55]</code></pre>
</div>
</div>
<p>こちらに実装の<a href="https://twitter.com/lotz84_/status/1810297167493701976">動作の様子を表すアニメーション</a>もあります。</p>
<p>まずはこれを参考にランダムフィボナッチ数列を計算する実装を書いてみましょう。</p>
<div id="5087cfaa-bf14-4bca-90b2-95ca5fd6fa92" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random</span> (randomIO)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rfibs1 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span>]</span>
<span id="cb4-4">rfibs1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> rfib1 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rfib1 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span></span>
<span id="cb4-7">rfib1 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-8">rfib1 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-9">rfib1 n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-10">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> rfibs1</span>
<span id="cb4-11">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> rfibs1</span>
<span id="cb4-12">  b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomIO</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b</span>
<span id="cb4-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
</div>
<div id="d07a5c39-6475-42d8-96ad-e1bd542ce3cf" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- &gt; take 10 &lt;$&gt; rfibs1</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 何も表示されず動作は終了しない</span></span></code></pre></div>
</div>
<p>こちらのナイーブな実装だと実行しても動作は終了しません。なぜでしょうか？</p>
<p>これは <a href="https://stackoverflow.com/questions/5892653/whats-so-bad-about-lazy-i-o">Lazy I/O</a> を避けるため <code>IO</code> 型が正格評価を行っているからで、簡単に言えば <code>fibs</code> の場合と異なり <code>IO [Integer]</code> からは遅延評価でリストの必要な部分だけを取り出すことはできず、中身を見るにはまず無限リストを評価しないといけない状況になっているのです。</p>
<p>単純な解決方法としては <a href="https://hackage.haskell.org/package/base-4.20.0.1/docs/System-IO-Unsafe.html#v:unsafeInterleaveIO"><code>unsafeInterleaveIO</code></a> を使用して<a href="https://stackoverflow.com/questions/12609208/lazy-version-of-mapm">遅延評価版の <code>mapM</code> を定義する</a>というものがありますが、unsafeな方法に頼るのは避けたいです。もちろん関数に必要な数列の長さも与えればこの問題を回避して実装することができますが、“無限の数列”と”必要な分だけ値を取り出す処理”の2つに分離して組み合わせる方が、実装を簡潔に保つことができるでしょう。ですので乱数が絡む数列であっても遅延評価をうまく使える無限列を定義できないか考えてみたいと思います。</p>
<section id="listt" class="level3">
<h3 class="anchored" data-anchor-id="listt"><code>ListT</code></h3>
<p>遅延評価と <code>IO</code> を組み合わせたいと思ったときの解決策として <code>pipes</code> や <code>conduit</code> のようなストリーム処理をサポートするライブラリの活用が挙げられます。今回はその中でも基本的な <code>list-t</code> を使うことにしましょう。<code>ListT</code> は名前の通りリストをモナドトランスフォーマーに拡張したものになっています。</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> m a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> (m (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> (a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> m a)))</span></code></pre></div>
<p>なぜ <code>ListT</code> の定義が単純な <code>m [a]</code> ではなくこのような実装になっているかは面白い話なのですが、既に分かりやすい解説記事があるので気になる人は下記を参照してみてください。</p>
<ul>
<li><a href="https://viercc.github.io/blog/posts/2021-07-17-monads-from-adjunction-2.html">随伴から作られるMonad</a></li>
<li><a href="https://blog.mudatobunka.org/entry/2018/01/03/233314">いろいろなパッケージから提供されている ListT モナド変換子の違いについて調べてみる</a></li>
<li><a href="https://wiki.haskell.org/ListT_done_right">ListT done right</a></li>
</ul>
<p>早速 <code>ListT</code> を使ったランダムフィボナッチ数列の実装を考えてみましょう。</p>
<div id="34109fd7-2ffe-4a19-9367-94b5b666f28e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span>)</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rfibs2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span></span>
<span id="cb7-5">rfibs2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ListT.traverse rfib2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.fromFoldable [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rfib2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span></span>
<span id="cb7-8">rfib2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-9">rfib2 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-10">rfib2 n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb7-11">  (fs, _) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ListT.splitAt n rfibs2</span>
<span id="cb7-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-13">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-14">  b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;- randomIO ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool</span></span>
<span id="cb7-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b</span>
<span id="cb7-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb7-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
</div>
<div id="5d84a544-9ffc-43e4-b8cf-71f01a18271a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1">ListT.toList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.take <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> rfibs2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1,1,2,3,1,-2,-1,-1,-4,-5]</code></pre>
</div>
</div>
<p>今度は動きました！しかし待ってください。よく見ると各項がバラバラで前2つの項の和や差に一致しておらずランダムフィボナッチ数列になっていません。これは <code>rfibs2</code> の要素はアクションであり計算結果がメモ化されるわけではないので <code>rfib2</code> の中で <code>rfibs2</code> が呼ばれる際に各項がまた再計算されてしまい起こっているのです。それなら仕方がないので数列全体をメモ化する方法は諦めて必要な項の値を引き回す実装に変えましょう。</p>
<div id="8484feef-bbc0-4e63-9eef-11cdcda5c450" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rfibs ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Integer</span></span>
<span id="cb10-2">rfibs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> ListT.unfoldM (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \(x, y) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb10-3">  b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomIO</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x, (y, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)))</span></code></pre></div>
</div>
<div id="a03e6b7f-d7a2-4cf9-9041-97022c2417b5" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1">ListT.toList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.take <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> rfibs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1,1,2,-1,1,0,1,-1,2,1]</code></pre>
</div>
</div>
<div id="a14b754c-451f-41eb-8908-3a26fc8c2931" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">ListT.toList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.take <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> rfibs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1,1,0,1,1,2,3,-1,4,3,1,4,5,-1,4,3,1,4,-3,7,4,3,7,10,17,-7,10,3,13,16,-3,13,-16,29,-45,-16,-29,-45,-74,29,-103,132,-235,-103,-132,-235,-367,-602,-969,-1571,602,-2173,2775,602,2173,2775,4948,7723,12671,-4948,7723,-12671,20394,-33065,53459,-86524,-33065,-119589,86524,-206113,-119589,-325702,206113,-531815,-325702,-857517,-1183219,325702,-857517,1183219,-2040736,3223955,-5264691,8488646,3223955,5264691,8488646,-3223955,11712601,8488646,20201247,28689893,48891140,77581033,-28689893,48891140,-77581033,-28689893,-106270926,77581033]</code></pre>
</div>
</div>
<p>今度はちゃんと動いてますね！</p>
</section>
</section>
<section id="viswanath定数の計算" class="level2">
<h2 class="anchored" data-anchor-id="viswanath定数の計算">Viswanath定数の計算</h2>
<p>それでは実装したランダムフィボナッチ数列 <code>rfibs</code> を使ってViswanath定数を計算してみましょう。まずは最初の20個ほど計算して眺めてみます。</p>
<div id="e5e87885-35c6-4ef0-88d0-1deaefe5435a" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb15-2">  xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ListT.toList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.take <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> rfibs</span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (\n x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0
1.0
1.4142135623730951
1.4422495703074083
1.4953487812212205
1.5157165665103982
1.2009369551760027
1.4085438884286994
1.390804235062458
1.4299691483087287
1.4424689075546286
1.271140212359713
1.3921616171717222
1.3818703308868108
1.4077091909894845
1.3030219289284708
1.3005578511750604
1.1679366751416516
1.2467894073120835
1.247697199056454</code></pre>
</div>
</div>
<p>うまく計算できていそうですね！（<code>n=0</code>のところは <img src="https://latex.codecogs.com/png.latex?1%5E%5Cinfty%20=%201"> ）</p>
<p>最後により大きな項まで計算して定数に収束していく様子を眺めて終わりましょう。</p>
<div id="8612ef53-ab69-4be9-ac08-3795eba68ca8" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb17-4">  xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ListT.toList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ListT.take <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span> rfibs</span>
<span id="cb17-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (\n x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs</span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span>  </span>
<span id="cb17-7">    layout_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last cs = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span> cs))</span>
<span id="cb17-8">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] cs])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-09-26/index_files/figure-html/cell-12-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-09-26/</guid>
  <pubDate>Wed, 25 Sep 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>HaskellでQR分解を実装する</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-05-12/</link>
  <description><![CDATA[ 





<p><strong>QR分解</strong>は与えられた<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20n">行列<img src="https://latex.codecogs.com/png.latex?A">を<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20m">のユニタリ行列（実数の場合、直交行列）<img src="https://latex.codecogs.com/png.latex?Q">と<img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20n">の上三角行列<img src="https://latex.codecogs.com/png.latex?R">の積、すなわち<img src="https://latex.codecogs.com/png.latex?A=QR">と分解する手法です。 数値的に安定な計算アルゴリズムが知られており、固有値の計算（<a href="https://en.wikipedia.org/wiki/QR_algorithm">QR法</a>）や<a href="https://twitter.com/lotz84_/status/1778800294207623190">カルマンフィルターの安定的な計算</a>にも応用されています。またこういった分解はより抽象的な対象で考えられることも多く、QR分解は<a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%BC%E7%BE%A4%E3%81%AE%E5%88%86%E8%A7%A3">半単純リー群の岩澤分解に一般化される</a>ことが知られています。</p>
<p>QR分解を実現するアルゴリズムは<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3">Wikipedia</a>にも詳しく載っており</p>
<ul>
<li>グラム・シュミットの正規直交化法</li>
<li>ハウスホルダー変換</li>
<li>ギブンス回転</li>
</ul>
<p>を利用した手法などがあります。</p>
<p>Haskellでも例えば <a href="https://hackage.haskell.org/package/hmatrix">hmatrix</a> が <a href="https://hackage.haskell.org/package/hmatrix-0.20.2/docs/Numeric-LinearAlgebra.html#v:qr"><code>qr</code></a> というQR分解を行う関数を提供していたり、hmatrixを使ったギブンス回転やハウスホルダー変換によるQR分解の実装を解説した記事もあります（<a href="http://www.nct9.ne.jp/m_hiroi/func/haskell48.html">お気楽 Haskell プログラミング入門 線形代数編</a>）。しかし本稿ではあえて vector-sized を使って自分で実装してみようと思い、数値的にも安定しているハウスホルダー変換を利用した<strong>実行列のQR分解</strong>の実装したいと思います。</p>
<section id="即席線形代数" class="level1">
<h1>即席線形代数</h1>
<p>まずは <a href="https://zenn.dev/lotz/articles/6b0d8081ad2f8a">Haskellで実装する即席線形代数</a> を参考に実装に必要なベクトルと行列の型と関数の定義を行います。</p>
<div id="8e633304-5173-40e0-9b2f-ccab2def1c5b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GHC.TypeLits</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Text.Printf</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span>)</span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> m (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ベクトルのスカラー倍</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(*^) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a</span>
<span id="cb1-11">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*^</span>) a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ベクトルをスカラー値で割る</span></span>
<span id="cb1-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(^/) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a</span>
<span id="cb1-15">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^/</span>) v a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recip</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*^</span> v</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 内積</span></span>
<span id="cb1-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">dot ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb1-19">dot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 外積</span></span>
<span id="cb1-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">outer ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> m a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a</span>
<span id="cb1-23">outer xs ys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) ys) xs</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ユークリッドノルム</span></span>
<span id="cb1-26"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">norm2V ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb1-27">norm2V <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | リストから行列を作成する</span></span>
<span id="cb1-30"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fromList ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [[a]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a)</span>
<span id="cb1-31">fromList <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&lt;</span>) V.fromList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> V.fromList</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列を整形して表示する</span></span>
<span id="cb1-34"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">displayM ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PrintfArg</span> a</span>
<span id="cb1-35">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 数値の表示幅</span></span>
<span id="cb1-36">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 有効数字</span></span>
<span id="cb1-37">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n m a</span>
<span id="cb1-38">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb1-39">displayM w p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.foldl (\x v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'\n'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> V.foldl (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> (V.map (printf <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%*.*f"</span> w p) v)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 単位行列</span></span>
<span id="cb1-42"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">identity ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n n a</span>
<span id="cb1-43">identity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.generate (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> V.generate (\y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列のスカラー倍</span></span>
<span id="cb1-46"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(*!!) ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a</span>
<span id="cb1-47">(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*!!</span>) a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map (V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a))</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列の転置</span></span>
<span id="cb1-50"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">transpose ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n m a</span>
<span id="cb1-51">transpose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequenceA</span></span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 行列積</span></span>
<span id="cb1-54"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">(!*!) ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> r, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n r a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m r a</span>
<span id="cb1-55">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (transpose b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> dot) a</span></code></pre></div>
</div>
</section>
<section id="ハウスホルダー変換" class="level1">
<h1>ハウスホルダー変換</h1>
<p><a href="https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%A6%E3%82%B9%E3%83%9B%E3%83%AB%E3%83%80%E3%83%BC%E5%A4%89%E6%8F%9B">ハウスホルダー変換</a>は与えられたベクトル<img src="https://latex.codecogs.com/png.latex?x">を単位法線ベクトル<img src="https://latex.codecogs.com/png.latex?v">で表された原典を通る超平面で<strong>鏡映変換</strong>する変換です。変換後のベクトルは <img src="https://latex.codecogs.com/png.latex?x%20-%202%20v%20%5Clangle%20v,%20x%20%5Crangle"> と表すことができ、これは行列 <img src="https://latex.codecogs.com/png.latex?I%20-%202vv%5E%7B%5Crm%20T%7D">を<img src="https://latex.codecogs.com/png.latex?x">に左から掛けて変換していると考えることもできます。このハウスホルダー変換を使えば、与えられた行列の列ベクトルを左から順番に第n成分までの部分空間に射影していくことでQR分解を得ることができます。</p>
<p>アルゴリズムの詳しい解説は他の記事に譲るとして（例えば<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3#%E3%83%8F%E3%82%A6%E3%82%B9%E3%83%9B%E3%83%AB%E3%83%80%E3%83%BC%E5%A4%89%E6%8F%9B%E3%81%AE%E4%BD%BF%E7%94%A8">Wikipedia</a>）、さっそく実装を見ていきたいと思います。以下 <code>householder</code> として実装するのは添字<img src="https://latex.codecogs.com/png.latex?i">とベクトル<img src="https://latex.codecogs.com/png.latex?x">が与えられた時に、<img src="https://latex.codecogs.com/png.latex?x">の第<img src="https://latex.codecogs.com/png.latex?i">成分以降を第<img src="https://latex.codecogs.com/png.latex?i">成分までの部分空間に射影する（すなわち残りの成分を0にする）ハウスホルダー変換を表す行列を計算する関数です。</p>
<div id="fb9662a3-76d4-410d-93bf-061e0b2f44f4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Maybe</span> (fromJust)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Finite</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Finite</span>)</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V'</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ハウスホルダー変換</span></span>
<span id="cb2-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">householder ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Finite</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span> n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> n n a</span>
<span id="cb2-8">householder i' x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i'</span>
<span id="cb2-10">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V'.drop i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.fromSized x</span>
<span id="cb2-11">      u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">V'.//</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, V'.head y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`V.withSized`</span> norm2V)]</span>
<span id="cb2-12">      padding <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">V'.++</span>) (V'.replicate i <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13">      u_norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`V.withSized`</span> norm2V</span>
<span id="cb2-14">      v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.toSized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V'.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>u_norm) u</span>
<span id="cb2-15">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span> u_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-12</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> identity <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*!!</span> outer v v</span></code></pre></div>
</div>
<p>ベクトルと行列の型にはサイズに関する情報を持たせていますが <code>householder</code> では最初からその情報を捨てて素の <code>Data.Vector</code> で変換を行っています。理由としてはハウスホルダー変換を計算するベクトルの長さ（すなわち<strong>型</strong>）は第一引数である <code>i'</code> の<strong>値</strong>に依存しており、今のHaskellの依存型だと今回の様な状況では簡潔に実装できる方法がないため型からサイズの情報を削ることにしました。</p>
<p>実装中に単位法線ベクトル<img src="https://latex.codecogs.com/png.latex?v">を計算するために法線ベクトル<img src="https://latex.codecogs.com/png.latex?u">をそのノルムで割る処理がありますが、<img src="https://latex.codecogs.com/png.latex?u">のノルムが非常に小さい場合この処理は不安定になります。しかし<img src="https://latex.codecogs.com/png.latex?u">のノルムが非常に小さいということは<img src="https://latex.codecogs.com/png.latex?x">と変換後のベクトルがほぼ等しいという状況を表しており、このような場合には結果となる変換行列をただの単位行列にするようにしています。</p>
</section>
<section id="qr分解" class="level1">
<h1>QR分解</h1>
<p>QR分解は与えられた行列の列ベクトルを左から順番にハウスホルダー変換して上三角行列を作ることにより得ることができます。</p>
<div id="5e0baf6e-6635-47ae-8b18-b08d4e1aafc3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE ScopedTypeVariables #-}</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Proxy</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Finite</span> (finite)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">qr ::</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">forall</span> m n a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m m a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> m n a)</span>
<span id="cb3-8">qr a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb3-9">  transpose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldl</span> (\(q, r) i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<span id="cb3-11">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> householder (finite i) (V.index r (finite i))</span>
<span id="cb3-12">       <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> p)</span>
<span id="cb3-13">    ) (identity, transpose a) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span> k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromInteger</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span> (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)) (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>m))</span></code></pre></div>
</div>
<p>実装上の都合で行列は行ベクトルのベクトルとなっているので、列ベクトルを扱うために最初に転置を行い<img src="https://latex.codecogs.com/png.latex?A%5E%7B%5Crm%20T%7D">、得られた<img src="https://latex.codecogs.com/png.latex?R%5E%7B%5Crm%20T%7D">を最後にもう一度転置することにより計算しています。<img src="https://latex.codecogs.com/png.latex?Q">については本来転置したものが計算結果になるのであえて転置をしていません。</p>
</section>
<section id="数値実験" class="level1">
<h1>数値実験</h1>
<p>それでは実装した <code>qr</code> によって実際に行列のQR分解ができるか実験してみましょう。</p>
<p>まずは<a href="https://ja.wikipedia.org/wiki/QR%E5%88%86%E8%A7%A3#%E4%BE%8B_2">Wikipediaに載っている例</a>を元に実験してみます。</p>
<div id="29fce92e-f12b-4c34-bc87-0f3163d813c5" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb4-5">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-6">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>]</span>
<span id="cb4-7">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>]]</span>
<span id="cb4-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb4-9">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb4-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb4-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb4-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb4-17">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.857  -0.394  -0.331
   0.429   0.903   0.034
  -0.286   0.171  -0.943
R = 
  14.000  21.000 -14.000
   0.000 175.000 -70.000
   0.000   0.000  35.000
QR = 
  12.000 -51.000   4.000
   6.000 167.000 -68.000
  -4.000  24.000 -41.000
Q^TQ =
   1.000   0.000   0.000
   0.000   1.000   0.000
   0.000   0.000   1.000</code></pre>
</div>
</div>
<p><a href="https://www.wolframalpha.com/input?i=QR+decomposition+%7B%7B12%2C+-51%2C+4%7D%2C+%7B6%2C+167%2C+-68%7D%2C+%7B-4%2C+24%2C+-41%7D%7D">WolframAlphaでも同様の計算を行った結果</a>と比べてみても値が一致していることが分かります。</p>
<p>次に非正則行列の場合を見てみましょう。先程の例の行ベクトルと列ベクトルを一つずつ0に変えたような行列を使って実験してみます。</p>
<div id="b37410ca-839d-431e-9268-2074d1a49bd5" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb6-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb6-3">            [ [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-4">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-5">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb6-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb6-7">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb6-9">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb6-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb6-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb6-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
  -0.000  -0.000   1.000
   0.832   0.555   0.000
  -0.555   0.832   0.000
R = 
   7.211 125.640   0.000
  -0.000 112.604   0.000
  -0.000   0.000   0.000
QR = 
  -0.000  -0.000   0.000
   6.000 167.000   0.000
  -4.000  24.000   0.000
Q^TQ =
   1.000   0.000  -0.000
   0.000   1.000   0.000
  -0.000   0.000   1.000</code></pre>
</div>
</div>
<p>問題なさそうですね。</p>
<p>次に非正方行列の場合を見てみましょう。</p>
<div id="52287087-9679-47b8-81c5-265c7249e4db" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb8-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb8-3">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>]</span>
<span id="cb8-4">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>]</span>
<span id="cb8-5">            , [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]]</span>
<span id="cb8-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb8-7">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb8-9">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb8-11">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb8-13">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb8-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb8-15">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.857  -0.394   0.331
   0.429   0.903  -0.034
  -0.286   0.171   0.943
R = 
  14.000  21.000
   0.000 175.000
  -0.000   0.000
QR = 
  12.000 -51.000
   6.000 167.000
  -4.000  24.000
Q^TQ =
   1.000   0.000  -0.000
   0.000   1.000  -0.000
  -0.000  -0.000   1.000</code></pre>
</div>
</div>
<div id="e172aa6b-1128-4154-a787-c244348a533b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb10-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fromList</span>
<span id="cb10-3">            [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb10-4">            , [ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>]]</span>
<span id="cb10-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">            ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb10-6">      (q, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> qr x</span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = "</span></span>
<span id="cb10-8">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> q</span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R = "</span></span>
<span id="cb10-10">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> r</span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QR = "</span></span>
<span id="cb10-12">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> r</span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">putStrLn</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q^TQ ="</span></span>
<span id="cb10-14">  displayM <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> transpose q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!*!</span> q</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Q = 
   0.894  -0.447
   0.447   0.894
R = 
  13.416  29.069 -26.833
  -0.000 172.177 -62.610
QR = 
  12.000 -51.000   4.000
   6.000 167.000 -68.000
Q^TQ =
   1.000   0.000
   0.000   1.000</code></pre>
</div>
</div>
<p>行より列が多い場合でも列より行が多い場合でも問題なく計算できています。</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-05-12/</guid>
  <pubDate>Sat, 11 May 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskellで実装するk-means法とk-means++法</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/</link>
  <description><![CDATA[ 





<p><strong>k-means問題</strong>はクラスタリングに関する問題で、データの集合を<img src="https://latex.codecogs.com/png.latex?X">、クラスタ数を<img src="https://latex.codecogs.com/png.latex?k">とした時に、<img src="https://latex.codecogs.com/png.latex?X">の<a href="https://ja.wikipedia.org/wiki/%E9%9B%86%E5%90%88%E3%81%AE%E5%88%86%E5%89%B2">分割</a><img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7BS_1,%20S_2,%20%5Cdots,%20S_k%5C%7D"> の中で以下のコスト関数</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7BS%7D%7B%5Carg%5Cmin%7D%20%5Csum_%7Bi=1%7D%5Ek%5Csum_%7Bx%5Cin%20S_i%7D%5C%7Cx-%5Cmu_i%5C%7C%5E2%0A"></p>
<p>を最小にするものを見つけることが目的です。</p>
<p>ここで <img src="https://latex.codecogs.com/png.latex?%5Cmu_i"> はクラスタの中心で</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_i%20=%20%5Cfrac%7B1%7D%7B%7CS_i%7C%7D%5Csum_%7Bx%5Cin%20S_i%7Dx%0A"></p>
<p>と平均値で計算されることが多いです。</p>
<section id="k-means法" class="level1">
<h1>k-means法</h1>
<p>この問題は<strong>NP困難</strong>であることが知られていますが、<a href="https://ja.wikipedia.org/wiki/K%E5%B9%B3%E5%9D%87%E6%B3%95">k-means法</a>（<a href="https://en.wikipedia.org/wiki/Lloyd%27s_algorithm">Lloydアルゴリズム</a>）と呼ばれる<strong>局所解を高速に与える有名なアルゴリズム</strong>があります。それは以下のようなものです。</p>
<ol type="1">
<li>クラスタの中心としてデータ点からランダムにk個を選ぶ</li>
<li>各データ点を中心が最も近いクラスタに分類する</li>
<li>各クラスタに属するデータから改めて中心を計算する</li>
<li>収束するまで2,3を繰り返す</li>
</ol>
<p>アルゴリズムのイメージは実際に視覚的に見てみるのが分かりやすいでしょう。以下のサイトがk-means法を可視化してくれていてインタラクティブに試すことができるのでオススメです。</p>
<ul>
<li><a href="http://tech.nitoyon.com/ja/blog/2013/11/07/k-means/">K-means 法を D3.js でビジュアライズしてみた</a></li>
</ul>
<p>Haskellにもk-means法を実装したライブラリはあります。</p>
<ul>
<li><a href="https://hackage.haskell.org/package/kmeans-0.1.3">kmeans</a></li>
<li><a href="https://hackage.haskell.org/package/kmeans-vector-0.3.2">kmeans-vector</a></li>
<li><a href="https://hackage.haskell.org/package/clustering">clustering</a></li>
</ul>
<p>ですが今回は自分で実装します。</p>
<div id="cbe07518-7510-44fa-899c-6439b39de18d" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE BlockArguments, DataKinds #-}</span> </span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GHC.TypeLits</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Sized</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | ボロノイ分割</span></span>
<span id="cb1-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">voronoiDecompose ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> b)</span>
<span id="cb1-10">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb1-11">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb1-12">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-13">                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) [a]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ボロノイ分割</span></span>
<span id="cb1-14">voronoiDecompose distance ds cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-15">  V.accum (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>)) (V.replicate []) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span></span>
<span id="cb1-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (V.minIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.map (distance d) cs, d)) ds</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | k-means法</span></span>
<span id="cb1-20"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">kMeans ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Eq</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> b)</span>
<span id="cb1-21">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb1-22">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> ([a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 集約関数</span></span>
<span id="cb1-23">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb1-24">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-25">       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb1-26">kMeans distance aggregate ds cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> cs' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> V.map aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> voronoiDecompose distance ds cs</span>
<span id="cb1-28">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cs' <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> cs' <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> kMeans distance aggregate ds cs'</span></code></pre></div>
</div>
<p><code>voronoiDecompose</code> は与えられた中心点に従ってデータ点を<a href="https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%AD%E3%83%8E%E3%82%A4%E5%9B%B3">ボロノイ領域</a>で分類する関数です。データ点はリストとして扱っていますが、中心点はランダムアクセスしたいので <a href="https://hackage.haskell.org/package/vector-sized-1.6.1/docs/Data-Vector-Sized.html#t:Vector"><code>Vector</code></a> を使って <img src="https://latex.codecogs.com/png.latex?O(1)"> アクセスできるようにしています。データ点の型は型変数で抽象化しており、必要になる距離関数は後から与えられるようになっています。</p>
<p><code>kMeans</code> はk-means法を計算する関数です。データ点をボロノイ分割した結果を集約して計算した新しい中心点がもとの中心点と一致するまで計算を繰り返します。</p>
</section>
<section id="k-means法-1" class="level1">
<h1>k-means++法</h1>
<p><code>kMeans</code> は中心点を更新していく関数として実装していますがそもそもの中心点はどのように用意すれば良いでしょうか。もちろんランダムなデータ点を取ってきても良いのですが、<a href="https://ja.wikipedia.org/wiki/K-means%2B%2B%E6%B3%95">k-means++法</a>と呼ばれる効率の良い中心点の与え方が知られています。k-means++法は以下のようなアルゴリズムです。</p>
<ol type="1">
<li>データ点からランダムに1つ目の中心点を選ぶ</li>
<li>それぞれのデータ点<img src="https://latex.codecogs.com/png.latex?x">に対して、最も近い中心点からの距離<img src="https://latex.codecogs.com/png.latex?D(x)">を計算する</li>
<li>データ点<img src="https://latex.codecogs.com/png.latex?x">につき重み<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BD%5E2(x)%7D%7B%5Csum_%7Bx%5Cin%20X%7DD%5E2(x)%7D">を考慮して新しい中心点をランダムに選ぶ</li>
<li>選ばれた中心点の数が予め与えられたクラスタ数<img src="https://latex.codecogs.com/png.latex?k">に到達するまで2,3を繰り返す</li>
</ol>
<p>感覚的には今ある中心点より遠くにあるデータ点が選ばれやすくなるように新しい中心点を選ぶような形になっています。それなら単純に<img src="https://latex.codecogs.com/png.latex?D(x)">に比例した重みでサンプリングしても良さそうなものですが、このアルゴリズムによって選ばれた中心点により評価したk-means問題のコスト関数の値を<img src="https://latex.codecogs.com/png.latex?%5Cphi">とすると、コスト関数の最小値<img src="https://latex.codecogs.com/png.latex?%5Cphi_%7B%5Crm%20OPT%7D">に対して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Crm%20E%7D%5B%5Cphi%5D%20%5Cleq%208(%5Clog%20k+2)%5Cphi_%7B%5Crm%20OPT%7D%0A"></p>
<p>を満たすことが<a href="https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf">証明できます</a>。この証明には<strong>コーシー・シュワルツの不等式</strong>が使われていて二乗の形であることが本質的な役割を果たしているのです（もう少し荒い評価にはなりますが単純に<img src="https://latex.codecogs.com/png.latex?l%5Ep">距離を用いた場合の不等式も論文には載っています）。このようにk-means++法は初期の中心点を決めた時点で期待値における理論的な精度評価が得られていますが、更にその後k-means法を用いてコスト関数を単調減少させることにより良いクラスタリングの結果が得られるようになっているのです。</p>
<p>それではk-means++法を実装してみましょう。</p>
<div id="50ddaa4b-23cb-4dc6-8201-0523c1bda092" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Proxy</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span>(..))</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Generic</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VG</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">qualified</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Vector.Generic.Sized.Internal</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VGSI</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random</span> (randomElement, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span>)</span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random.Distribution.Categorical</span> (weightedCategorical)</span>
<span id="cb2-7"></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ref. https://github.com/expipiplus1/vector-sized/issues/123</span></span>
<span id="cb2-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unfoldrM ::</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">forall</span> m n a b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Monad</span> m, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n)</span>
<span id="cb2-11">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> m (a, b)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> m (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> n a)</span>
<span id="cb2-12">unfoldrM f z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VGSI.Vector</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> VG.unfoldrExactNM i f z</span>
<span id="cb2-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span> i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (natVal (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Proxy</span> n))</span>
<span id="cb2-14"></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | k-means++法</span></span>
<span id="cb2-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">kMeansPlusPlus ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KnownNat</span> n</span>
<span id="cb2-18">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 距離関数</span></span>
<span id="cb2-19">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- データ点</span></span>
<span id="cb2-20">               <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> n a) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 中心点</span></span>
<span id="cb2-21">kMeansPlusPlus distance ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unfoldrM f []</span>
<span id="cb2-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb2-23">  f [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-24">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomElement ds</span>
<span id="cb2-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (c, [c])</span>
<span id="cb2-26">  f cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> ws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> distance c d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) cs) ds</span>
<span id="cb2-28">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> weightedCategorical (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ws ds)</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (c, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cs)</span></code></pre></div>
</div>
<p>k-means++法を実装するために<code>unfoldrM</code>という便利関数を定義しています。実は<code>vector</code>ライブラリにはこのような関数が<a href="https://hackage.haskell.org/package/vector-0.13.1.0/docs/Data-Vector-Unboxed.html#g:10">定義されている</a>のですが<code>vector-sized</code>には無いので自前で実装しています（実装して欲しいという<a href="https://github.com/expipiplus1/vector-sized/issues/123">issue</a>はあります）。</p>
<p><code>unfoldrM</code>を使えばk-means++法は素直に場合分けして実装するだけです。k-means++法はランダムな選択を伴うので何らかのモナドに包む必要があります。<code>IO</code>にしてしまっても良いのですが<a href="https://qiita.com/lotz/items/7c7df718d1a596cac920">確率分布もまたそれ自体がモナドになる</a>ので、できるだけ抽象的な型に留める形で実装しています。確率分布（確率変数）の型として、ここでは <a href="https://hackage.haskell.org/package/random-fu"><code>random-fu</code></a>の<code>RVar</code>を使っています。</p>
</section>
<section id="実験" class="level1">
<h1>実験</h1>
<p>それでは実装したk-means法、k-means++法を使って実際にクラスタリングを行ってみましょう。まずはクラスタリングの対象となる平面上の点を実装していきます。</p>
<div id="295b594b-15dc-4202-8160-79596d592867" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.List</span> (foldl')</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Maybe</span> (fromJust)</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 平面上の点</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | x, y 座標から点を構築する</span></span>
<span id="cb3-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">mkPoint ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span></span>
<span id="cb3-11">mkPoint a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fromJust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.fromList [a, b]</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 距離関数</span></span>
<span id="cb3-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">distance ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb3-16">distance v1 v2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>) v1 v2</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 平均値関数</span></span>
<span id="cb3-20"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">average ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span></span>
<span id="cb3-21">average ps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb3-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> ps</span>
<span id="cb3-23">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> V.map (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> foldl' (V.zipWith (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>)) (V.replicate <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) ps</span></code></pre></div>
</div>
<p>最後にこれらの点をランダムにサンプリングしてクラスタリングしてみましょう。クラスタの数は型に現れるので型注釈で与えます。</p>
<div id="b737df9e-d1c8-488a-b98f-c6b008da101d" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span> (replicateM)</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Traversable</span> (forM)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Random</span> (normal, sampleFrom)</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random.Stateful</span> (newIOGenM, mkStdGen)</span>
<span id="cb4-7"></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">samples ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>]</span>
<span id="cb4-10">samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> forM clusters \(m, s) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<span id="cb4-11">  replicateM nEachSamples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> mkPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> normal m s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;*&gt;</span> normal m s</span>
<span id="cb4-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb4-13">  nEachSamples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb4-14">  clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb4-15"></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-18">  gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newIOGenM (mkStdGen <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-19">  ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sampleFrom gen samples</span>
<span id="cb4-20">  cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sampleFrom gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span></span>
<span id="cb4-21">    kMeansPlusPlus distance<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ds ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">V.Vector</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Point</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- k-means++法</span></span>
<span id="cb4-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> cs' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kMeans distance average ds cs  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- k-means法</span></span>
<span id="cb4-23">      voronoi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> voronoiDecompose distance ds cs'</span>
<span id="cb4-24">      toTuple v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (V.index v <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, V.index v <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-26">    plot (points <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> toTuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.index voronoi <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-27">    plot (points <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 2"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> toTuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> V.index voronoi <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2024-03-23/</guid>
  <pubDate>Fri, 22 Mar 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>高次元空間ではL1距離を使うのが良さそう</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/</link>
  <description><![CDATA[ 





<p><a href="https://www.semanticscholar.org/paper/On-the-Surprising-Behavior-of-Distance-Metrics-in-Aggarwal-Hinneburg/88fc7fc6ed73db6251967cfe40507a92008e5949">“On the Surprising Behavior of Distance Metrics in High Dimensional Spaces”</a>という論文を読んで面白かったのでまとめておきます。</p>
<p><img src="https://latex.codecogs.com/png.latex?d">次元空間の立方体<img src="https://latex.codecogs.com/png.latex?(0,1)%5Ed">中に分布する確率変数<img src="https://latex.codecogs.com/png.latex?X_d">を考えます。例えばモノクロ画像なんかは正規化すれば今考えてる確率変数になるでしょう。今<img src="https://latex.codecogs.com/png.latex?(0,%201)">上の任意の分布<img src="https://latex.codecogs.com/png.latex?F">を考え<img src="https://latex.codecogs.com/png.latex?F%5Ed">を確率分布とする<img src="https://latex.codecogs.com/png.latex?X_d">から<img src="https://latex.codecogs.com/png.latex?n">個のサンプルが得られたとします。サンプルにおける<img src="https://latex.codecogs.com/png.latex?L_k">ノルムの最大値を<img src="https://latex.codecogs.com/png.latex?Dmax%5Ek_d">、最小値を<img src="https://latex.codecogs.com/png.latex?Dmin%5Ek_d">とすると、<img src="https://latex.codecogs.com/png.latex?F">と<img src="https://latex.codecogs.com/png.latex?k">のみに依存する定数<img src="https://latex.codecogs.com/png.latex?C_k">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC_k%20%5Cleq%20%5Cunderset%7Bd%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%7B%5Crm%20E%7D%5Cleft%5B%5Cfrac%7BDmax%5Ek_d%20-%20Dmin%5Ek_d%7D%7Bd%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D%7D%5Cright%5D%20%5Cleq%20(n-1)C_k%0A"></p>
<p>が成り立ちます。ここで<img src="https://latex.codecogs.com/png.latex?%7B%5Crm%20E%7D%5BX%5D">は<img src="https://latex.codecogs.com/png.latex?X">の期待値を表します。</p>
<p>つまりデータの存在する次元が上がるにつれて原点に近いものと遠いものの差が変化するスピードは<img src="https://latex.codecogs.com/png.latex?d%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D">ぐらいになるということです。証明を読めば分かりますが、差の漸近的な振る舞いを決める<img src="https://latex.codecogs.com/png.latex?d%5E%7B%5Cfrac%7B1%7D%7Bk%7D-%5Cfrac%7B1%7D%7B2%7D%7D">の<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D">は中心極限定理から出てきます。もし<img src="https://latex.codecogs.com/png.latex?k%20%5Cgeq%203">であればこれは減衰するので、どんどん近いデータと遠いデータの間に差がなくなってくるということを意味しています。これは原点を任意の注目する点に置き換えて考えれば、例えばサンプルの近傍を考えるときに次元が高くなると遠いものと近いものの区別がどんどんつかなくなっていくことを表しています。一方もし<img src="https://latex.codecogs.com/png.latex?k=2">であればこの差は一定に落ち着き、<img src="https://latex.codecogs.com/png.latex?k=1">であれば（期待通り？）大きくなってくれます。</p>
<p>次元が高くなれば立方体の対角線の長さも大きくなるので直感的には最大値と最小値の差はどんどん大きくなっていきそうですが、同時に、すべての次元で0付近の値が出る確率や1付近の値が出る確率は次元が高くなるとどんどん小さくなるので、差の期待値がどう振る舞うかはこれらの綱引きになりそうなことは直感的には分かります。この綱引きの勝敗が距離の測り方で決まるのは面白いですね。</p>
<p>この挙動を実際に確かめてみましょう。</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span> (replicateM)</span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random.MWC</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 確率変数</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GenIO</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | n個のリストの確率変数</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">randomNs ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> [a]</span>
<span id="cb1-11">randomNs n x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sample n</span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb1-13">    sample <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> _ <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> []</span>
<span id="cb1-14">    sample n g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-15">      a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x g</span>
<span id="cb1-16">      as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) g</span>
<span id="cb1-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>as)</span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- L_kノルム</span></span>
<span id="cb1-21"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">lk ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb1-22">lk k xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>k) xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> k)</span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | Dmax^k_d - Dmin^k_d</span></span>
<span id="cb1-26"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">diameter ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 直径計算のためのサンプルを生成する数</span></span>
<span id="cb1-27">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- L_kノルムのk</span></span>
<span id="cb1-28">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 次元d</span></span>
<span id="cb1-29">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span></span>
<span id="cb1-30">diameter n k d g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> xs g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> replicateM d (uniformR (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) g)</span>
<span id="cb1-32">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-33">     xss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomNs n xs g</span>
<span id="cb1-34">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (lk k) xss</span>
<span id="cb1-35">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maximum</span> ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimum</span> ds</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- | 確率変数の期待値</span></span>
<span id="cb1-39"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">expected ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb1-40">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値を計算するのに用いるサンプル数</span></span>
<span id="cb1-41">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値を求める確率変数</span></span>
<span id="cb1-42">         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RVar</span> a <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 期待値の確率変数</span></span>
<span id="cb1-43">expected n x g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-44">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomNs n x g</span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> as <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Traversable</span> (forM)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">ds ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>]</span>
<span id="cb2-5">ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb2-6"></span>
<span id="cb2-7">withSystemRandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-8">  diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> d) gen</span>
<span id="cb2-9">  diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> d) gen</span>
<span id="cb2-10">  diff3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> d) gen</span>
<span id="cb2-11">  diff4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> forM ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> expected <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> (diameter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> d) gen</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-13">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 1"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff1])</span>
<span id="cb2-14">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 2"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff2])</span>
<span id="cb2-15">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 3"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff3])</span>
<span id="cb2-16">      plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k = 4"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> ds diff4])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/index_files/figure-html/cell-3-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>次元を増やすにつれて<img src="https://latex.codecogs.com/png.latex?k=1">の時は最小値と最大値の差が大きくなっていきますが、<img src="https://latex.codecogs.com/png.latex?k=2">の場合は一定に落ち着き、<img src="https://latex.codecogs.com/png.latex?k=3,4">の場合は差がどんどんなくなっていき、この傾向は<img src="https://latex.codecogs.com/png.latex?k">が大きければより強いことが分かります。</p>
<p>論文ではもう一つ面白い式が導かれています。先程の不等式は最大値と最小値の差についてでしたが、今度は比についてです。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bd%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20%7B%5Crm%20E%7D%5Cleft%5B%5Csqrt%7Bd%7D%5Cleft(%5Cfrac%7BDmax%5Ek_d%7D%7BDmin%5Ek_d%7D%20-%201%5Cright)%5Cright%5D%20=%20C%5Csqrt%7B%5Cfrac%7B1%7D%7B2k+1%7D%7D%0A"></p>
<p>ただしこの式は<img src="https://latex.codecogs.com/png.latex?F">が一様分布でサンプルが2点である時という制約がついています。この式が示唆するのは最大値と最小値の比は<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Csqrt%7Bd%7D%7D">ぐらいのスピードで1に近づいていくということで、この挙動は<img src="https://latex.codecogs.com/png.latex?k">が1,2のときでも変わりません。</p>



 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-07-11/</guid>
  <pubDate>Fri, 10 Jul 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>2点テイラー展開の定義と数値実験</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/</link>
  <description><![CDATA[ 





<p>テイラー展開は滑らかな関数の一点における値や微分の値を使ったべき級数によって元の関数を表す方法でした。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20f(a)%20+%20f'(a)(x%20-%20a)%20+%20%5Cfrac%7Bf''(a)%7D%7B2!%7D%5Cleft(x-a%5Cright)%5E2%20+%20%5Cfrac%7Bf'''(a)%7D%7B3!%7D%5Cleft(x-a%5Cright)%5E3%20+%20%5Ccdots%0A"></p>
<p>これを2点以上に拡張したテイラー展開が存在していて、特に2点でテイラー展開を行うものは2点テイラー展開と呼ばれているそうです。</p>
<p>なんで2点でテイラー展開したくなるのかというと、普通のテイラー展開だと1点における2n階までの微分値を使わないと達成できない近似精度を2点テイラー展開だと2点におけるn階までの微分値で達成できたりするそうなのですが（スゴイ！）[^1]、個人的には2点でテイラー展開することで区分的に定義された関数も近似できるのが面白いなと思いました。</p>
<p>テイラー展開は1点の周りにおける情報しか使わないので通常近似できる範囲はその1点の近くまでです。特に関数が折れ線だったり、<a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">ReLU</a>のように各領域によって違う関数の組み合わせで表されている場合には領域を区分する点をまたいで近似できる範囲を拡張することができません。そこで2点テイラー展開を使えば区分する点をまたいだ2点の周りで展開することによりそれぞれの点の周りの情報を使ってテイラー展開よりも近似できる範囲を拡張することができるのです。以下の定理はこのことをより正確に表しています[^2]。</p>
<hr>
<p>Theorem. <img src="https://latex.codecogs.com/png.latex?f">を<img src="https://latex.codecogs.com/png.latex?%7B%5Cmathbb%20R%7D">上の以下のように表される関数とする。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cbegin%7Bcases%7D%20p(x)%5C%20%5C%20x%20%5Cin%20%5B0,%20%5Cinfty)%20%5C%5C%20q(x)%5C%20%5C%20x%20%5Cin%20(-%5Cinfty,%200)%20%5Cend%7Bcases%7D%0A"></p>
<p>ここで<img src="https://latex.codecogs.com/png.latex?p,%20q">は高々<img src="https://latex.codecogs.com/png.latex?m">次の多項式とする。この時、もし<img src="https://latex.codecogs.com/png.latex?p(0)=q(0)">であるならば<img src="https://latex.codecogs.com/png.latex?f(x)">は-1, 1において2点テイラー展開可能であり、<img src="https://latex.codecogs.com/png.latex?p_%7Bf,%5C%7B-1,%201%5C%7D(n,%20n)%7D(x)">をエルミート補間多項式だとすると以下が成り立つ。</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bn%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7Dp_%7Bf,%5C%7B-1,%201%5C%7D(n,%20n)%7D(x)=f(x),%20%5Cforall%20x%20%5Cin%20%5Cleft(-%5Csqrt%202,%20%5Csqrt%202%5Cright)%0A"></p>
<hr>
<p>ところでまだ2点テイラー展開の定義をしていませんでした。2点テイラー展開は多項式補間の考え方を経由して定義されます。<br>
（以下の説明は[^2]の導入部分を大いに参考にしています）</p>
<p>十分になめらかな実数値関数<img src="https://latex.codecogs.com/png.latex?f(x)">に対して<img src="https://latex.codecogs.com/png.latex?n">個の点<img src="https://latex.codecogs.com/png.latex?X%20=%20%5C%7Bx_0,%5Cdots,x_n%5C%7D">とそれぞれの点に対応する自然数<img src="https://latex.codecogs.com/png.latex?k_i(0%5Cleq%20i%5Cleq%20n)">が与えられた時、高々<img src="https://latex.codecogs.com/png.latex?m(=k_0+%5Ccdots+k_n-1)">次の多項式<img src="https://latex.codecogs.com/png.latex?p_%7Bf,X(k_0,%5Cdots,k_n)%7D(x)">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%5E%7B(j)%7D_%7Bf,X(k_0,%5Cdots,k_n)%7D(x_i)%20=%20f%5E%7B(j)%7D(x_i),%200%5Cleq%20j%20%5Cleq%20k_i-1,%200%20%5Cleq%20i%20%5Cleq%20n%0A"></p>
<p>を満たす時、<img src="https://latex.codecogs.com/png.latex?p_%7Bf,X(k_0,%5Cdots,k_n)%7D(x)">を<img src="https://latex.codecogs.com/png.latex?f(x)">のエルミート補間多項式と呼びます。</p>
<p>もし<img src="https://latex.codecogs.com/png.latex?f(x)">が一点<img src="https://latex.codecogs.com/png.latex?x_0">の周りで無限回微分可能であり、ある正の実数<img src="https://latex.codecogs.com/png.latex?%5Crho">が存在して</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bn%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20p_%7Bf,X(n)%7D(x)%20=%20f(x),%20%5Cforall%20x%20%5Cin%20(x_0-%5Crho,%20x_0+%5Crho)%0A"></p>
<p>となるならば<img src="https://latex.codecogs.com/png.latex?f(x)">は同じ範囲でテイラー展開可能であることが分かります。</p>
<p>この事実を発展させて<img src="https://latex.codecogs.com/png.latex?n">点テイラー展開は以下のように定義されます。</p>
<hr>
<p><img src="https://latex.codecogs.com/png.latex?f">をある区間<img src="https://latex.codecogs.com/png.latex?I">で定義された実数値関数とし、<img src="https://latex.codecogs.com/png.latex?I">に含まれる<img src="https://latex.codecogs.com/png.latex?n">個の点<img src="https://latex.codecogs.com/png.latex?X=%5C%7Bx_0,%5Cdots%20x_%7Bn-1%7D%5C%7D">で<img src="https://latex.codecogs.com/png.latex?f">が無限回微分可能であったとする。もし</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7Bm%20%5Crightarrow%20%5Cinfty%7D%7B%5Clim%7D%20p_%7Bf,X(m,%5Cdots,m)%7D(x)%20=%20f(x),%20%5Cforall%20x%20%5Cin%20I%0A"></p>
<p>が成り立つならば<img src="https://latex.codecogs.com/png.latex?f">は<img src="https://latex.codecogs.com/png.latex?I">において<img src="https://latex.codecogs.com/png.latex?n">点テイラー展開可能であるという。</p>
<hr>
<p><img src="https://latex.codecogs.com/png.latex?n">点テイラー展開の具体的な形は、エルミート補間多項式の一般公式が知られているので[^3]そちらから計算可能でしょう。特に2点テイラー展開の場合の級数の計算式は以下のようにできるとTwitterで教えてもらいました[^4]。（そもそも2点テイラー展開を知ったきっかけも、このnotebookを書こうと思ったのも島田さんのTweetに触発されてでした。感謝🙏）</p>
<section id="数値実験" class="level2">
<h2 class="anchored" data-anchor-id="数値実験">数値実験</h2>
<p>比較のためにまずは通常のテイラー展開を実装してみます</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Number.Symbolic</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.AD</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.AD.Mode.Tower</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 階乗</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fact ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb1-11">fact n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">product</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n]</span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開</span></span>
<span id="cb1-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">taylorSeries ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb1-16">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- この次数以下の級数まで展開する</span></span>
<span id="cb1-17">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">forall</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開する関数</span></span>
<span id="cb1-18">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点</span></span>
<span id="cb1-19">             <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開後の級数</span></span>
<span id="cb1-20">taylorSeries n f a x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefficients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polynomials</span>
<span id="cb1-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb1-22">  coefficients <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs f a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- f(a)/0!, f'(a)/1!, f''(a)/2!, f'''(a)/3!, ...</span></span>
<span id="cb1-23">  factorials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fact) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 0!, 1!, 2!, 3!, ...</span></span>
<span id="cb1-24">  polynomials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-a, (x-a)^2, (x-a)^3, ...</span></span>
<span id="cb1-25">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>)</span>
<span id="cb1-26">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29">taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (var <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1.0+x+0.5*x*x+0.16666666666666666*x*x*x</code></pre>
</div>
</div>
<p>4次までの指数関数のテイラー展開をちゃんと計算できていますね</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1%20+%20x%20+%20%5Cfrac%7Bx%5E2%7D%7B2!%7D%20+%20%5Cfrac%7Bx%5E3%7D%7B3!%7D%0A"></p>
<p>次は2点テイラー展開を実装してみましょう</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 2点テイラー展開</span></span>
<span id="cb3-2"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">twoPointTaylorSeries ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Fractional</span> a</span>
<span id="cb3-3">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- この次数以下の級数まで展開する</span></span>
<span id="cb3-4">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">forall</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AD</span> s (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tower</span> a)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- テイラー展開する関数</span></span>
<span id="cb3-5">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点1</span></span>
<span id="cb3-6">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開する点2</span></span>
<span id="cb3-7">                     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a)                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 展開後の級数</span></span>
<span id="cb3-8">twoPointTaylorSeries n f a b x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> seriesA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seriesB</span>
<span id="cb3-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb3-10">  seriesA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polyB)</span>
<span id="cb3-11">  seriesB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> coefA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span> polyA)</span>
<span id="cb3-12">  fa x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> auto b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- A(x)</span></span>
<span id="cb3-13">  fb x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> auto a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- B(x)</span></span>
<span id="cb3-14">  coefA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs fa a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- A(a)/0!, A'(a)/1!, A''(a)/2!, A'''(a)/3!, ...</span></span>
<span id="cb3-15">  coefB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> diffs fb b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span> factorials  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- B(b)/0!, B'(b)/1!, B''(b)/2!, B'''(b)/3!, ...</span></span>
<span id="cb3-16">  polyA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-a, (x-a)^2, (x-a)^3, ...</span></span>
<span id="cb3-17">  polyB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;$&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1, x-b, (x-b)^2, (x-b)^3, ...</span></span>
<span id="cb3-18">  factorials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fact) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 0!, 1!, 2!, 3!, ...</span></span>
<span id="cb3-19">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|/|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>)</span>
<span id="cb3-20">  (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|*|</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zipWith</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"></span>
<span id="cb3-23">twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (var <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- id ≡ f(x) = x</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.25*(1.0+x)*(1.0+x)+(-0.25)*(-1.0+x)*(-1.0+x)</code></pre>
</div>
</div>
<p>式が複雑になるので<img src="https://latex.codecogs.com/png.latex?f(x)=x">という単純な関数を展開して確かめてみました。式を整理するとちゃんと正しい答えになってるのが分かります。</p>
<p>それでは実際に関数を近似してみましょう</p>
<p>まずは</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7B1+x%5E2%7D%0A"></p>
<p>という関数を展開してみましょう</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">cauchy ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb5-4">cauchy x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">domain ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb5-7">domain <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span>
<span id="cb5-8"></span>
<span id="cb5-9">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb5-10">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cauchy"</span>    [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, cauchy x)])</span>
<span id="cb5-11">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> cauchy <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> x)])</span>
<span id="cb5-12">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> cauchy (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>青線が元の関数、緑線が<img src="https://latex.codecogs.com/png.latex?0">周りでの5次までのテイラー展開、赤線が<img src="https://latex.codecogs.com/png.latex?-1,%201">周りでの5次までの2点テイラー展開です。同じ次数までの展開ですが2点テイラー展開のほうがより高い精度で近似できているのが分かります</p>
<p>次に区分的に定義された関数であるReLUを展開してみましょう</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">relu ::</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ord</span> a, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Floating</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<span id="cb6-2">relu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb6-5">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ReLU"</span>      [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, relu x)])</span>
<span id="cb6-6">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, taylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> relu <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span>
<span id="cb6-7">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two point"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (x, twoPointTaylorSeries <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> relu (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> x)])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>テイラー展開は<img src="https://latex.codecogs.com/png.latex?1">の周りで展開していますがやはり0以下で関数が変わっていることには対応できていません。一方で2点テイラー展開は<img src="https://latex.codecogs.com/png.latex?1">の周りに加えて<img src="https://latex.codecogs.com/png.latex?-1">の周りの情報もつかえているのでReLUの形をより正確に近似できているのが分かります。</p>
</section>
<section id="参考文献" class="level2">
<h2 class="anchored" data-anchor-id="参考文献">参考文献</h2>
<ul>
<li>[1] Estes, R. H., and E. R. Lancaster. “Two-point Taylor series expansions.” (1966).</li>
<li>[2] Kitahara, Kazuaki, Taizo Chiyonobu, and Hirokazu Tsukamoto. “A note on two point Taylor expansion.” International Journal of Pure and Applied Mathematics 75.3 (2012): 327-338.</li>
<li>[3] 鈴木 実, “エルミート補間の一般公式（Generalized Hermite interpolation）” <a href="http://totoha.web.fc2.com/Hermite_interpolation.pdf" class="uri">http://totoha.web.fc2.com/Hermite_interpolation.pdf</a></li>
<li>[4] <a href="https://twitter.com/KS_Mathematics/status/1279807348391854080" class="uri">https://twitter.com/KS_Mathematics/status/1279807348391854080</a></li>
</ul>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-07-09/</guid>
  <pubDate>Wed, 08 Jul 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskellの非同期処理を使った入出力の重ね合わせ</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-06-29/</link>
  <description><![CDATA[ 





<p>これは<a href="https://jclub-heyhey.connpass.com/event/180807/">『Haskellによる並列・並行プログラミング』リモート輪講 #10</a>の発表資料です。</p>
<p>Haskellの非同期処理を使って並行に入出力を伴う処理を行うプログラムを書く方法について見ていきます。まず、複数のWebページを並行にダウンロードするようなタスクを考えます</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls1.hs</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Concurrent</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.ByteString.Char8</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">B</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">System.Random</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">getURL ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ByteString</span></span>
<span id="cb1-8">getURL url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-9">  delay <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomRIO (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- URLのコンテンツを取得する時間ということにする</span></span>
<span id="cb1-10">  threadDelay delay</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (B.pack url)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example1 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb1-14">example1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-15">  m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb1-16">  m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb1-17">  </span>
<span id="cb1-18">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-19">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Shovel"</span></span>
<span id="cb1-20">    putMVar m1 r</span>
<span id="cb1-21"></span>
<span id="cb1-22">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-23">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Spade"</span></span>
<span id="cb1-24">    putMVar m2 r</span>
<span id="cb1-25"></span>
<span id="cb1-26">  r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m1</span>
<span id="cb1-27">  r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m2</span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> (B.length r1, B.length r2)</span>
<span id="cb1-29"></span></code></pre></div>
</div>
<ul>
<li><code>newEmptyMVar</code>で結果を受け取る箱を作る</li>
<li>非同期に取得処理を行い、結果を<code>MVar</code>に詰める</li>
<li><code>MVar</code>に結果が入るのを待つ</li>
</ul>
<p>という共通する実装のパターンが見え隠れしているので共通化してみましょう</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls2.hs</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MVar</span> a)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">async ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a)</span>
<span id="cb2-6">async action <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-7">  var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb2-8">  forkIO (action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar var)</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">wait ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb2-12">wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> readMVar var</span></code></pre></div>
</div>
<p>意図しないデッドロックを防ぐために <code>wait</code> では <code>takeMVar</code> ではなく <code>readMVar</code> を使っています</p>
<p>これを使えば <code>example1</code> を以下のように書き換えることができます</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls2.hs</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example2 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb3-4">example2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb3-5">  a1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> async (getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Shovel"</span>)</span>
<span id="cb3-6">  a2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> async (getURL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Spade"</span>)</span>
<span id="cb3-7">  r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wait a1</span>
<span id="cb3-8">  r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wait a2</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> (B.length r1, B.length r2)</span>
<span id="cb3-10"></span>
<span id="cb3-11">example2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(36,35)</code></pre>
</div>
</div>
<p>モナディックなコンビネータを使って更に簡潔に書くことも可能です</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls3.hs</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">sites <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb5-4">  [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.google.com"</span></span>
<span id="cb5-5">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.bing.com"</span></span>
<span id="cb5-6">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.yahoo.com"</span></span>
<span id="cb5-7">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.wikipedia.com/wiki/Spade"</span></span>
<span id="cb5-8">  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.wikipedia.com/wiki/Shovel"</span></span>
<span id="cb5-9">  ]</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example3 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb5-12">example3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb5-13">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL) sites</span>
<span id="cb5-14">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb5-16"></span>
<span id="cb5-17">example3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[21,19,20,35,36]</code></pre>
</div>
</div>
<section id="asyncでのエラー処理" class="level2">
<h2 class="anchored" data-anchor-id="asyncでのエラー処理">Asyncでのエラー処理</h2>
<p><code>getURL</code> の中でエラーが起こった場合の挙動を見てみましょう</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Exception</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">getURL' ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ByteString</span></span>
<span id="cb7-4">getURL' url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb7-5">  throwIO (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ErrorCall</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oops!"</span>)</span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (B.pack url)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example4 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb7-9">example4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb7-10">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL') sites</span>
<span id="cb7-11">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb7-13"></span>
<span id="cb7-14">example4</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>: 
thread blocked indefinitely in an MVar operation</code></pre>
</div>
</div>
<p><code>getURL'</code> では <code>async</code> の中で <code>putMVar</code> が実行される前に例外が投げられてしまうので <code>wait</code> における <code>readMVar</code> が永遠にスレッドをブロックしてしまいます</p>
<p>これを安全な挙動に変えるために <code>Async</code> 周りの実装を修正してみしましょう</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls4.hs</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">newtype</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MVar</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SomeException</span> a))</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">async ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a)</span>
<span id="cb9-6">async action <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb9-7">  var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb9-8">  forkIO (try action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar var)</span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitCatch ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SomeException</span> a)</span>
<span id="cb9-12">waitCatch (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> var) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> readMVar var</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">wait ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb9-15">wait a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb9-16">  r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> waitCatch a</span>
<span id="cb9-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">of</span></span>
<span id="cb9-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> e  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> throwIO e</span>
<span id="cb9-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> a</span></code></pre></div>
</div>
<p><code>async</code> と <code>wait</code> は以前のものと同じ型ですが、例外を適切に伝搬する仕組みを備えています</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb10-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example5 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb10-2">example5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb10-3">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> getURL') sites</span>
<span id="cb10-4">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait as</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> B.length result</span>
<span id="cb10-6"></span>
<span id="cb10-7">example5</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>: 
oops!</code></pre>
</div>
</div>
<p>最初に非同期処理が例外を投げた時点でプログラム全体が停止しているのが分かります</p>
</section>
<section id="非同期処理の合流" class="level2">
<h2 class="anchored" data-anchor-id="非同期処理の合流">非同期処理の合流</h2>
<p>ここでは並行に実行している非同期処理のどれか一つでも結果を返した時点で何らかの処理を行いたいような場合について見ていきます。</p>
<p>以下の例は並行に複数のWebサイトをダウンロードして</p>
<ul>
<li>最初にダウンロードが完了したWebサイトの情報を表示する</li>
<li>残りのダウンロードが完了するのを待つ</li>
</ul>
<p>という挙動を実装しています。</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls5.hs</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Monad</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example6 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb12-6">example6 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb12-7">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb12-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> download url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb12-9">        r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL url</span>
<span id="cb12-10">        putMVar m (url, r)</span>
<span id="cb12-11"></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> (forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> download) sites</span>
<span id="cb12-13">  </span>
<span id="cb12-14">  (url, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> takeMVar m</span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (B.length r)</span>
<span id="cb12-16">  replicateM_ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> (takeMVar m)</span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 実行するたびに結果が変わる</span></span>
<span id="cb12-19">example6</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>"http://www.wikipedia.com/wiki/Shovel: 36"</code></pre>
</div>
</div>
<p>これを明示的に <code>MVar</code> を用いずに <code>Async</code> を使って実装する事を考えましょう。</p>
<p>以下の <code>waitEither</code> は2つの <code>Async</code> を受け取って最初に完了した値を <code>IO</code> で返す関数です。</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitEither ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> a b)</span>
<span id="cb14-2">waitEither a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb14-3">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb14-4">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span>  (wait a)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb14-5">  forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (wait b)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb14-6">  wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> m)</span></code></pre></div>
</div>
<p>この仕組は複数の <code>Async</code> のリストにも拡張することができます</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitAny ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> a</span>
<span id="cb15-2">waitAny as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb15-3">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newEmptyMVar</span>
<span id="cb15-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> forkwait a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> forkIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> try (wait a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> putMVar m</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> forkwait as</span>
<span id="cb15-6">  wait (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> m)</span>
<span id="cb15-7"></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 勉強会中に逆に全てのAsyncを待つようなコンビネータが作れるか？という質問があったので実装してみた例</span></span>
<span id="cb15-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">waitAll ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Async</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> [a]</span>
<span id="cb15-11">waitAll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> wait</span></code></pre></div>
</div>
<p>以上の実装を使って <code>example6</code> は明示的に <code>MVar</code> を使わない形で書き換えることができます。</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- https://github.com/simonmar/parconc-examples/blob/master/geturls6.hs</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">example7 ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">IO</span> ()</span>
<span id="cb16-4">example7 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb16-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> download url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb16-6">        r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> getURL url</span>
<span id="cb16-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pure</span> (url, r)</span>
<span id="cb16-8"></span>
<span id="cb16-9">  as <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM</span> (async <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> download) sites</span>
<span id="cb16-10">  </span>
<span id="cb16-11">  (url, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> waitAny as</span>
<span id="cb16-12">  </span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span> (B.length r)</span>
<span id="cb16-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapM_</span> wait as</span>
<span id="cb16-15"></span>
<span id="cb16-16">example7</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>"http://www.wikipedia.com/wiki/Spade: 35"</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-06-29/</guid>
  <pubDate>Sun, 28 Jun 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>GHCi の :sprint が便利</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-04-12/</link>
  <description><![CDATA[ 





<p>これは<a href="https://eigenspace.connpass.com/event/172164/">『Haskellによる並列・並行プログラミング』リモート輪講 #1</a>で学んだことのメモです。</p>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:sprint"><code>:sprint</code></a>は変数の評価を”行わずに”その内容を表示する機能。これを使えばサンクのまま詰まれていてまだ評価されていない部分も確認することができる</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = _
</span>
</div>
</div>
<p>↑アンダースコアはサンクを表しておりxがまだ評価されていないことが分かる</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1">x</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>3</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = 3
</span>
</div>
</div>
<p>↑<code>x</code>が評価されたので中身も見えるようになった</p>
<p>次は変数が変数を参照している例</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb4-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint y</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = _
</span>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">y = _
</span>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> y ()</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint x</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint y</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">x = 3
</span>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">y = 4
</span>
</div>
</div>
<p>↑<code>seq</code>を使うと第一引数が弱頭部正規形（最初の構成子が見えるところ）まで強制的に評価される</p>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="cb7-2">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x, x)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = _
</span>
</div>
</div>
<p>あれ？これはへいへいHaskellでは <code>z = (_, _)</code> と見えるはずなんだけど違う結果になってしまった。</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Tuple</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> swap (x, x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = _
</span>
</div>
</div>
<div id="cell-12" class="cell" data-scrolled="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> z ()</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = (_,_)
</span>
</div>
</div>
<p>↑今度はうまくタプルの構成子が見えるところまで評価された</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> x ()</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint z</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">z = (_,3)
</span>
</div>
</div>
<p>↑<code>x</code>だけ評価すると<code>3</code>が見えるようになった。<code>z</code>が評価されていないので<code>x + 1</code>の部分はサンク<code>_</code>のままである</p>
<p>今度はリストと <code>map</code> を使ったときの挙動を見てみる</p>
<div id="cell-16" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>]</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = _
</span>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span> xs ()</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>()</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = _ : _
</span>
</div>
</div>
<p>↑<code>:</code>はリストの構成子なのでここが弱頭部正規形</p>
<div id="cell-19" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>10</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = [_,_,_,_,_,_,_,_,_,_]
</span>
</div>
</div>
<p>↑<code>length</code>は中身を評価しないので構造だけが評価されて中はサンクのまま</p>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> xs</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sprint xs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>65</code></pre>
</div>
<div class="cell-output cell-output-display">
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style><span class="get-type">xs = [2,3,4,5,6,7,8,9,10,11]
</span>
</div>
</div>
<p>↑これで全部評価された</p>
<p><code>:sprint</code> を使うとHaskellの遅延評価で何がどこまで評価されるのかインタラクティブに分かるので面白い。</p>



 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-04-12/</guid>
  <pubDate>Sat, 11 Apr 2020 15:00:00 GMT</pubDate>
</item>
<item>
  <title>高速フーリエ変換を実装してみた</title>
  <dc:creator>lotz </dc:creator>
  <link>https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/</link>
  <description><![CDATA[ 





<p><a href="https://caddi.tech/archives/836">高速フーリエ変換の実装を難しそうかなと思っている方が、なんだ簡単じゃないですか！！ となるための実装講座です</a> という記事が分かりやすかったのでHaskellでも実装してみました</p>
<section id="離散フーリエ変換" class="level2">
<h2 class="anchored" data-anchor-id="離散フーリエ変換">離散フーリエ変換</h2>
<p>まずは普通のフーリエ変換を実装します</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Data.Complex</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb1-4">fourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb1-6">      f aj i j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> aj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb1-7">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldr</span> (\(j, aj) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) (f aj i j)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">inverseFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb1-10">inverseFourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb1-12">      f aj i j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> aj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb1-13">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flip</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> \i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldr</span> (\(j, aj) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) (f aj i j)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n</span></code></pre></div>
</div>
<p>元に戻ることを確認。これは気が向いたらQuickCheckで書き直したい</p>
<div id="cell-5" class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1">inverseFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fourierTransform [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1.0000000000000002 :+ 5.551115123125783e-16,2.0 :+ 3.885780586188048e-16,3.0 :+ 5.551115123125783e-17,4.0 :+ (-3.3306690738754696e-16)]</code></pre>
</div>
</div>
</section>
<section id="高速フーリエ変換" class="level2">
<h2 class="anchored" data-anchor-id="高速フーリエ変換">高速フーリエ変換</h2>
<p>高速フーリエ変換はフーリエ変換の計算を分割して再帰的に計算するので関数型プログラミングと相性が良さそうかなと思ったけど実装は泥臭い感じになりました。うまいやり方とかあったらTwitterでこっそり教えて下さい</p>
<p>あと単純な実装なので2の累乗の長さのリストでしかうまく行かないやつです。</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Control.Arrow</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">splitEvenOdd ::</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> ([a], [a])</span>
<span id="cb4-4">splitEvenOdd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">***</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> go ([], [])</span>
<span id="cb4-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span> go x [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb4-6">        go (xs, ys) [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs, ys)</span>
<span id="cb4-7">        go (xs, ys) (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>zs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> go (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ys) zs</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">mapTuple2 ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> b) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (a, a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> (b, b)</span>
<span id="cb4-10">mapTuple2 f (a1, a2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (f a1, f a2)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fastFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb4-13">fastFourierTransform []  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of list must be the power of 2."</span></span>
<span id="cb4-14">fastFourierTransform [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [x]</span>
<span id="cb4-15">fastFourierTransform xs  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb4-17">      (bs, cs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mapTuple2 fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> splitEvenOdd xs</span>
<span id="cb4-18">      atN2 xs i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`mod`</span> (n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-19">      f i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> bs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb4-20">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> f [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">inverseFastFourierTransform ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RealFloat</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> a]</span>
<span id="cb4-23">inverseFastFourierTransform xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> ifft xs</span>
<span id="cb4-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb4-25">    ifft []  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of list must be the power of 2."</span></span>
<span id="cb4-26">    ifft [x] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [x]</span>
<span id="cb4-27">    ifft xs  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-28">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs</span>
<span id="cb4-29">          (bs, cs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mapTuple2 ifft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> splitEvenOdd xs</span>
<span id="cb4-30">          atN2 xs i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span> (i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`mod`</span> (n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-31">          f i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> bs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`atN2`</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cis (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> n)</span>
<span id="cb4-32">       <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> f [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>これも元に戻ることを確認</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb5-1">inverseFastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> fastFourierTransform [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1.0 :+ 4.057416247971343e-16,2.0 :+ 9.385873628418619e-17,3.0 :+ 8.411709486180696e-17,4.0 :+ (-2.1632341619892149e-16)]</code></pre>
</div>
</div>
</section>
<section id="実験ローパスフィルタ" class="level2">
<h2 class="anchored" data-anchor-id="実験ローパスフィルタ">実験：ローパスフィルタ</h2>
<p>実装したFFTでうまく周波数の空間に変換できてるのか確認します。低周波と高周波を合成した信号を作成し、低周波成分だけ取り出してみます。</p>
<div id="cell-11" class="cell" data-scrolled="false" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">signal ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb7-4">signal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (\i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromIntegral</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>]</span>
<span id="cb7-5"></span>
<span id="cb7-6">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmal"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] signal])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>実行した高速フーリエ変換で変換して周波数空間での様子を確認</p>
<div id="cell-13" class="cell" data-scrolled="false" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">fSignal ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Complex</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb8-2">fSignal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) signal</span>
<span id="cb8-3"></span>
<span id="cb8-4">fSignalR,<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> fSignalI ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb8-5">fSignalR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> realPart fSignal</span>
<span id="cb8-6">fSignalI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> imagPart fSignal</span>
<span id="cb8-7"></span>
<span id="cb8-8">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb8-9">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fSignalR"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] fSignalR])</span>
<span id="cb8-10">    plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fSignalI"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] fSignalI])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>ローパスフィルタは、フーリエ変換して先頭からN個の成分以外を0にして逆フーリエ変換するように実装する</p>
<p>想定通りに低周波成分だけ取り出すことができた。なんだ簡単じゃないですか！！</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">consider ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Num</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [a]</span>
<span id="cb9-2">consider _ []     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-3">consider <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> xs     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> xs) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-4">consider n (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> consider (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) xs</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">lowPassFilter ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb9-7">lowPassFilter n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> realPart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> inverseFastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> consider n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> fastFourierTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">signal' ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Double</span>]</span>
<span id="cb9-10">signal' <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> lowPassFilter <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> signal</span>
<span id="cb9-11"></span>
<span id="cb9-12">toRenderable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> plot (line <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signal'"</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>] signal'])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/index_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>高速フーリエ変換、完全に理解した。</p>


</section>

 ]]></description>
  <guid>https://lotz84.github.io/haskell-notebooks/posts/2020-03-29/</guid>
  <pubDate>Sat, 28 Mar 2020 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
